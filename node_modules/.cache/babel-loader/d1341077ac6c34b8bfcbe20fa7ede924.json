{"ast":null,"code":"export { cropText, getTextWidth } from './text';\nexport * from './icon';\nexport { CASES } from './cases';\nexport { setNodeColor, getNodeColor, HIGHLIGHT_COLOR, SELECTED_COLOR } from './color';\nexport const pruneEdge = (node, threshold, childeNum) => {\n  if (node.children.length > 0) {\n    node = { ...node,\n      children: node.children.filter(d => d.score >= threshold).map(node => pruneEdge(node, threshold, childeNum)).slice(0, childeNum) // only keep top 7 children\n\n    };\n  }\n\n  return node;\n};\nexport const flatTree = node => {\n  let res = [node.nodeId];\n\n  if (node.children.length > 0) {\n    res = res.concat(...node.children.map(d => flatTree(d)));\n  }\n\n  return res;\n};\nexport const sigmoid = t => {\n  return 1 / (1 + Math.pow(Math.E, -t));\n};\nexport const removeDiseaseList = ['mendelian disease', 'disease of cell nucleous', 'hip region disease', 'acute disease', 'vector borne disease', 'cancer', 'sex-linked disease', 'movement disorder'];\nexport const wheterRemoveDisease = disease => {\n  return removeDiseaseList.includes(disease.toLowerCase());\n};\nexport const sentenceCapitalizer = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nexport const INIT_DISEASE = '5090_13498_8414_10897_33312_10943_11552_14092_12054_11960_11280_11294_11295_11298_11307_11498_12879_13089_13506';\nexport const INIT_DRUGS = ['DB08815', 'DB01239', 'DB00933', 'DB00363'];","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/helpers/index.ts"],"names":["cropText","getTextWidth","CASES","setNodeColor","getNodeColor","HIGHLIGHT_COLOR","SELECTED_COLOR","pruneEdge","node","threshold","childeNum","children","length","filter","d","score","map","slice","flatTree","res","nodeId","concat","sigmoid","t","Math","pow","E","removeDiseaseList","wheterRemoveDisease","disease","includes","toLowerCase","sentenceCapitalizer","str","charAt","toUpperCase","INIT_DISEASE","INIT_DRUGS"],"mappings":"AACA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,QAAvC;AACA,cAAc,QAAd;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,SACEC,YADF,EAEEC,YAFF,EAGEC,eAHF,EAIEC,cAJF,QAKO,SALP;AAOA,OAAO,MAAMC,SAAS,GAAG,CACvBC,IADuB,EAEvBC,SAFuB,EAGvBC,SAHuB,KAIJ;AACnB,MAAIF,IAAI,CAACG,QAAL,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC5BJ,IAAAA,IAAI,GAAG,EACL,GAAGA,IADE;AAELG,MAAAA,QAAQ,EAAEH,IAAI,CAACG,QAAL,CACPE,MADO,CACCC,CAAD,IAAOA,CAAC,CAACC,KAAF,IAAWN,SADlB,EAEPO,GAFO,CAEFR,IAAD,IAAUD,SAAS,CAACC,IAAD,EAAOC,SAAP,EAAkBC,SAAlB,CAFhB,EAGPO,KAHO,CAGD,CAHC,EAGEP,SAHF,CAFL,CAKmB;;AALnB,KAAP;AAOD;;AACD,SAAOF,IAAP;AACD,CAfM;AAiBP,OAAO,MAAMU,QAAQ,GAAIV,IAAD,IAAoC;AAC1D,MAAIW,GAAG,GAAG,CAACX,IAAI,CAACY,MAAN,CAAV;;AACA,MAAIZ,IAAI,CAACG,QAAL,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC5BO,IAAAA,GAAG,GAAGA,GAAG,CAACE,MAAJ,CAAW,GAAGb,IAAI,CAACG,QAAL,CAAcK,GAAd,CAAmBF,CAAD,IAAOI,QAAQ,CAACJ,CAAD,CAAjC,CAAd,CAAN;AACD;;AACD,SAAOK,GAAP;AACD,CANM;AAQP,OAAO,MAAMG,OAAO,GAAIC,CAAD,IAAe;AACpC,SAAO,KAAK,IAAIC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,CAAd,EAAiB,CAACH,CAAlB,CAAT,CAAP;AACD,CAFM;AAIP,OAAO,MAAMI,iBAAiB,GAAG,CAC/B,mBAD+B,EAE/B,0BAF+B,EAG/B,oBAH+B,EAI/B,eAJ+B,EAK/B,sBAL+B,EAM/B,QAN+B,EAO/B,oBAP+B,EAQ/B,mBAR+B,CAA1B;AAWP,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAA8B;AAC/D,SAAOF,iBAAiB,CAACG,QAAlB,CAA2BD,OAAO,CAACE,WAAR,EAA3B,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,mBAAmB,GAAIC,GAAD,IAAiB;AAClD,SAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAAChB,KAAJ,CAAU,CAAV,CAArC;AACD,CAFM;AAIP,OAAO,MAAMmB,YAAY,GACvB,iHADK;AAEP,OAAO,MAAMC,UAAU,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAnB","sourcesContent":["import { IAttentionTree } from 'types';\nexport { cropText, getTextWidth } from './text';\nexport * from './icon';\nexport { CASES } from './cases';\n\nexport {\n  setNodeColor,\n  getNodeColor,\n  HIGHLIGHT_COLOR,\n  SELECTED_COLOR,\n} from './color';\n\nexport const pruneEdge = (\n  node: IAttentionTree,\n  threshold: number,\n  childeNum?: number\n): IAttentionTree => {\n  if (node.children.length > 0) {\n    node = {\n      ...node,\n      children: node.children\n        .filter((d) => d.score >= threshold)\n        .map((node) => pruneEdge(node, threshold, childeNum))\n        .slice(0, childeNum), // only keep top 7 children\n    };\n  }\n  return node;\n};\n\nexport const flatTree = (node: IAttentionTree): string[] => {\n  let res = [node.nodeId];\n  if (node.children.length > 0) {\n    res = res.concat(...node.children.map((d) => flatTree(d)));\n  }\n  return res;\n};\n\nexport const sigmoid = (t: number) => {\n  return 1 / (1 + Math.pow(Math.E, -t));\n};\n\nexport const removeDiseaseList = [\n  'mendelian disease',\n  'disease of cell nucleous',\n  'hip region disease',\n  'acute disease',\n  'vector borne disease',\n  'cancer',\n  'sex-linked disease',\n  'movement disorder',\n];\n\nexport const wheterRemoveDisease = (disease: string): boolean => {\n  return removeDiseaseList.includes(disease.toLowerCase());\n};\n\nexport const sentenceCapitalizer = (str: string) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nexport const INIT_DISEASE =\n  '5090_13498_8414_10897_33312_10943_11552_14092_12054_11960_11280_11294_11295_11298_11307_11498_12879_13089_13506';\nexport const INIT_DRUGS = ['DB08815', 'DB01239', 'DB00933', 'DB00363'];\n"]},"metadata":{},"sourceType":"module"}