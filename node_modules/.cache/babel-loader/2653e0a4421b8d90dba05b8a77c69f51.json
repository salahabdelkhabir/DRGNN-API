{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Explorer_V2\\\\src\\\\stores\\\\index.tsx\";\nimport React, { createContext } from 'react';\nimport rootReducer from './reducer';\nconst initialState = {\n  diseaseOptions: [],\n  drugPredictions: [],\n  nodeTypes: [],\n  edgeTypes: {},\n  metaPathGroups: {},\n  attention: {},\n  selectedDisease: undefined,\n  nodeNameDict: {},\n  isInitializing: true,\n  isDrugLoading: false,\n  isAttentionLoading: false,\n  isDiseaseLoading: false,\n  edgeThreshold: 0,\n  metaPathSummary: [],\n  selectedPathNodes: [],\n  caseDescription: undefined\n};\nconst GlobalStore = createContext({}); // An wrapping function to handle thunks (dispatched actions which are wrapped in a function, needed for async callbacks)\n\nconst asyncer = (dispatch, state) => action => typeof action === 'function' ? action(dispatch, state) : dispatch(action); // The StateProvider component to provide the global state to all child components\n\n\nexport function StateProvider(props) {\n  const [state, dispatchBase] = React.useReducer(rootReducer, initialState);\n  const dispatch = React.useCallback(asyncer(dispatchBase, state), []);\n  return /*#__PURE__*/React.createElement(GlobalStore.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, props.children);\n}\nexport function StateConsumer(Component) {\n  return function WrapperComponent(props) {\n    return /*#__PURE__*/React.createElement(GlobalStore.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, context => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      globalState: context.state,\n      dispatch: context.dispatch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    })));\n  };\n}","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/stores/index.tsx"],"names":["React","createContext","rootReducer","initialState","diseaseOptions","drugPredictions","nodeTypes","edgeTypes","metaPathGroups","attention","selectedDisease","undefined","nodeNameDict","isInitializing","isDrugLoading","isAttentionLoading","isDiseaseLoading","edgeThreshold","metaPathSummary","selectedPathNodes","caseDescription","GlobalStore","asyncer","dispatch","state","action","StateProvider","props","dispatchBase","useReducer","useCallback","children","StateConsumer","Component","WrapperComponent","context"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,WAAP,MAAwB,WAAxB;AAGA,MAAMC,YAAoB,GAAG;AAC3BC,EAAAA,cAAc,EAAE,EADW;AAE3BC,EAAAA,eAAe,EAAE,EAFU;AAG3BC,EAAAA,SAAS,EAAE,EAHgB;AAI3BC,EAAAA,SAAS,EAAE,EAJgB;AAK3BC,EAAAA,cAAc,EAAE,EALW;AAM3BC,EAAAA,SAAS,EAAE,EANgB;AAO3BC,EAAAA,eAAe,EAAEC,SAPU;AAQ3BC,EAAAA,YAAY,EAAE,EARa;AAS3BC,EAAAA,cAAc,EAAE,IATW;AAU3BC,EAAAA,aAAa,EAAE,KAVY;AAW3BC,EAAAA,kBAAkB,EAAE,KAXO;AAY3BC,EAAAA,gBAAgB,EAAE,KAZS;AAa3BC,EAAAA,aAAa,EAAE,CAbY;AAc3BC,EAAAA,eAAe,EAAE,EAdU;AAe3BC,EAAAA,iBAAiB,EAAE,EAfQ;AAgB3BC,EAAAA,eAAe,EAAET;AAhBU,CAA7B;AAwBA,MAAMU,WAAW,GAAGpB,aAAa,CAAC,EAAD,CAAjC,C,CAEA;;AACA,MAAMqB,OAAO,GAAG,CAACC,QAAD,EAAgBC,KAAhB,KAAmCC,MAAD,IAChD,OAAOA,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACF,QAAD,EAAWC,KAAX,CAArC,GAAyDD,QAAQ,CAACE,MAAD,CADnE,C,CAGA;;;AACA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAAmC;AACxC,QAAM,CAACH,KAAD,EAAQI,YAAR,IAAwB5B,KAAK,CAAC6B,UAAN,CAAiB3B,WAAjB,EAA8BC,YAA9B,CAA9B;AAEA,QAAMoB,QAAQ,GAAGvB,KAAK,CAAC8B,WAAN,CAAkBR,OAAO,CAACM,YAAD,EAAeJ,KAAf,CAAzB,EAAgD,EAAhD,CAAjB;AAEA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAASD,MAAAA;AAAT,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,KAAK,CAACI,QADT,CADF;AAKD;AAED,OAAO,SAASC,aAAT,CAAuBC,SAAvB,EAAuC;AAC5C,SAAO,SAASC,gBAAT,CAA0BP,KAA1B,EAAsC;AAC3C,wBACE,oBAAC,WAAD,CAAa,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIQ,OAAD,iBACC,oBAAC,SAAD,oBACMR,KADN;AAEE,MAAA,WAAW,EAAEQ,OAAO,CAACX,KAFvB;AAGE,MAAA,QAAQ,EAAEW,OAAO,CAACZ,QAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFJ,CADF;AAWD,GAZD;AAaD","sourcesContent":["import React, { createContext } from 'react';\nimport rootReducer from './reducer';\nimport { IState } from 'types';\n\nconst initialState: IState = {\n  diseaseOptions: [],\n  drugPredictions: [],\n  nodeTypes: [],\n  edgeTypes: {},\n  metaPathGroups: {},\n  attention: {},\n  selectedDisease: undefined,\n  nodeNameDict: {},\n  isInitializing: true,\n  isDrugLoading: false,\n  isAttentionLoading: false,\n  isDiseaseLoading: false,\n  edgeThreshold: 0,\n  metaPathSummary: [],\n  selectedPathNodes: [],\n  caseDescription: undefined,\n};\n\ninterface IStateContext {\n  state: IState;\n  dispatch: ({ type }: { type: string }) => void;\n}\n\nconst GlobalStore = createContext({} as IStateContext);\n\n// An wrapping function to handle thunks (dispatched actions which are wrapped in a function, needed for async callbacks)\nconst asyncer = (dispatch: any, state: IState) => (action: any) =>\n  typeof action === 'function' ? action(dispatch, state) : dispatch(action);\n\n// The StateProvider component to provide the global state to all child components\nexport function StateProvider(props: any) {\n  const [state, dispatchBase] = React.useReducer(rootReducer, initialState);\n\n  const dispatch = React.useCallback(asyncer(dispatchBase, state), []);\n\n  return (\n    <GlobalStore.Provider value={{ state, dispatch }}>\n      {props.children}\n    </GlobalStore.Provider>\n  );\n}\n\nexport function StateConsumer(Component: any) {\n  return function WrapperComponent(props: any) {\n    return (\n      <GlobalStore.Consumer>\n        {(context) => (\n          <Component\n            {...props}\n            globalState={context.state}\n            dispatch={context.dispatch}\n          />\n        )}\n      </GlobalStore.Consumer>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}