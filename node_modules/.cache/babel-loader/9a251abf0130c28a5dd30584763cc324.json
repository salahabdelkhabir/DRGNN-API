{"ast":null,"code":"import { requestAttentionPair, requestDrugPredictions } from 'stores/DataService';\nexport const ACTION_TYPES = {\n  Load_Node_Types: 'Load_Node_Types',\n  Load_Edge_Types: 'Load_Edge_Types',\n  Load_Meta_Paths: 'Load_Meta_Paths',\n  Add_Attention_Paths: 'Add_Attention_Paths',\n  Del_Attention_Paths: 'Del_Attention_Paths',\n  Load_Node_Name_Dict: 'Load_Node_Name_Dict',\n  Load_Drug_Options: 'Load_Drug_Options',\n  Load_Disease_Options: 'Load_Disease_Options',\n  Set_Loading_Status: 'Set_Loading_Status',\n  Change_Edge_THR: 'Change_Edge_THR',\n  Change_Drug: 'Change_Drug',\n  Change_Disease: 'Change_Disease',\n  Select_Path_Noes: 'Select_Path_Nodes',\n  Toggle_Meta_Path_Hide: 'Toggle_Meta_Path_Hide',\n  Toggle_Meta_Path_Expand: 'Toggle_Meta_Path_Expand',\n  Update_Case_Description: 'Update_Case_Description'\n};\nexport const selectDrug = (selectedDrug, selectedDisease, isAdd, dispatch) => {\n  if (selectedDisease) {\n    changeDrug(selectedDrug, dispatch);\n    return modifyAttentionPaths(selectedDrug, selectedDisease, isAdd, dispatch);\n  }\n};\nexport const updateCaseDescription = (caseDescription, dispatch) => {\n  dispatch({\n    type: ACTION_TYPES.Update_Case_Description,\n    payload: {\n      caseDescription\n    }\n  });\n};\nexport const selectDisease = (selectedDisease, dispatch) => {\n  dispatch({\n    type: ACTION_TYPES.Set_Loading_Status,\n    payload: {\n      isDrugLoading: true,\n      isAttentionLoading: true\n    }\n  });\n  dispatch({\n    type: ACTION_TYPES.Change_Disease,\n    payload: {\n      selectedDisease\n    }\n  });\n  dispatch({\n    type: ACTION_TYPES.Change_Drug,\n    payload: {\n      selectedDrug: undefined\n    }\n  });\n  return requestDrugPredictions(selectedDisease).then(res => {\n    const predictions = res;\n    const drugPredictions = predictions.map(d => {\n      return { ...d,\n        selected: false\n      };\n    });\n    dispatch({\n      type: ACTION_TYPES.Load_Drug_Options,\n      payload: {\n        drugPredictions\n      }\n    });\n  }).then(() => {\n    dispatch({\n      type: ACTION_TYPES.Set_Loading_Status,\n      payload: {\n        isDrugLoading: false,\n        isAttentionLoading: false\n      }\n    });\n  });\n};\n\nconst modifyAttentionPaths = (selectedDrug, selectedDisease, isAdd, dispatch) => {\n  if (selectedDrug !== undefined && selectedDisease !== undefined) {\n    if (isAdd) {\n      dispatch({\n        type: ACTION_TYPES.Set_Loading_Status,\n        payload: {\n          isAttentionLoading: true\n        }\n      });\n      return requestAttentionPair(selectedDisease, selectedDrug).then(res => {\n        dispatch({\n          type: ACTION_TYPES.Add_Attention_Paths,\n          payload: {\n            attention: res.attention,\n            selectedDrug,\n            metaPathGroups: {\n              [selectedDrug]: groupMetaPaths(res.paths)\n            }\n          }\n        });\n      }).then(() => {\n        dispatch({\n          type: ACTION_TYPES.Set_Loading_Status,\n          payload: {\n            isAttentionLoading: false\n          }\n        });\n      });\n    } else {\n      dispatch({\n        type: ACTION_TYPES.Del_Attention_Paths,\n        payload: {\n          selectedDrug\n        }\n      });\n      return Promise.resolve();\n    }\n  }\n};\n\nconst changeDrug = (selectedDrug, dispatch) => {\n  dispatch({\n    type: ACTION_TYPES.Change_Drug,\n    payload: {\n      selectedDrug\n    }\n  });\n};\n\nconst groupMetaPaths = paths => {\n  let groups = [];\n  let groupDict = [];\n  paths.forEach(path => {\n    path.hide = false; // initi, show all metapaths\n\n    const nodeTypeString = path.nodes.map(d => d.nodeType).join('_');\n    const groupIdx = groupDict.indexOf(nodeTypeString);\n\n    if (groupIdx > -1) {\n      groups[groupIdx].paths.push(path);\n    } else {\n      groupDict.push(nodeTypeString);\n      groups.push({\n        nodeTypes: path.nodes.map(d => d.nodeType),\n        paths: [path]\n      });\n    }\n  });\n  return groups;\n};\n\nexport const toggleMetaPathHide = (metaPathSummary, idx, dispatch) => {\n  metaPathSummary[idx]['hide'] = !metaPathSummary[idx]['hide'];\n\n  if (metaPathSummary[idx]['hide']) {\n    metaPathSummary[idx]['expand'] = false; // if hide, then collapse\n  }\n\n  dispatch({\n    type: ACTION_TYPES.Toggle_Meta_Path_Hide,\n    payload: {\n      metaPathSummary\n    }\n  });\n};\nexport const toggleMetaPathExpand = (metaPathSummary, idx, dispatch) => {\n  metaPathSummary[idx]['expand'] = !metaPathSummary[idx]['expand'];\n  dispatch({\n    type: ACTION_TYPES.Toggle_Meta_Path_Hide,\n    payload: {\n      metaPathSummary\n    }\n  });\n};","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/stores/actions.ts"],"names":["requestAttentionPair","requestDrugPredictions","ACTION_TYPES","Load_Node_Types","Load_Edge_Types","Load_Meta_Paths","Add_Attention_Paths","Del_Attention_Paths","Load_Node_Name_Dict","Load_Drug_Options","Load_Disease_Options","Set_Loading_Status","Change_Edge_THR","Change_Drug","Change_Disease","Select_Path_Noes","Toggle_Meta_Path_Hide","Toggle_Meta_Path_Expand","Update_Case_Description","selectDrug","selectedDrug","selectedDisease","isAdd","dispatch","changeDrug","modifyAttentionPaths","updateCaseDescription","caseDescription","type","payload","selectDisease","isDrugLoading","isAttentionLoading","undefined","then","res","predictions","drugPredictions","map","d","selected","attention","metaPathGroups","groupMetaPaths","paths","Promise","resolve","groups","groupDict","forEach","path","hide","nodeTypeString","nodes","nodeType","join","groupIdx","indexOf","push","nodeTypes","toggleMetaPathHide","metaPathSummary","idx","toggleMetaPathExpand"],"mappings":"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","sourcesContent":["import {\n  DrugPrediction,\n  IDispatch,\n  IPath,\n  IMetaPath,\n  IMetaPathSummary,\n} from 'types';\nimport {\n  requestAttentionPair,\n  requestDrugPredictions,\n} from 'stores/DataService';\nimport { Descriptions } from 'antd';\n\nexport const ACTION_TYPES = {\n  Load_Node_Types: 'Load_Node_Types',\n  Load_Edge_Types: 'Load_Edge_Types',\n  Load_Meta_Paths: 'Load_Meta_Paths',\n  Add_Attention_Paths: 'Add_Attention_Paths',\n  Del_Attention_Paths: 'Del_Attention_Paths',\n  Load_Node_Name_Dict: 'Load_Node_Name_Dict',\n  Load_Drug_Options: 'Load_Drug_Options',\n  Load_Disease_Options: 'Load_Disease_Options',\n\n  Set_Loading_Status: 'Set_Loading_Status',\n\n  Change_Edge_THR: 'Change_Edge_THR',\n  Change_Drug: 'Change_Drug',\n  Change_Disease: 'Change_Disease',\n  Select_Path_Noes: 'Select_Path_Nodes',\n\n  Toggle_Meta_Path_Hide: 'Toggle_Meta_Path_Hide',\n  Toggle_Meta_Path_Expand: 'Toggle_Meta_Path_Expand',\n  Update_Case_Description: 'Update_Case_Description',\n};\n\nexport const selectDrug = (\n  selectedDrug: string,\n  selectedDisease: string | undefined,\n  isAdd: boolean,\n  dispatch: IDispatch\n) => {\n  if (selectedDisease) {\n    changeDrug(selectedDrug, dispatch);\n    return modifyAttentionPaths(selectedDrug, selectedDisease, isAdd, dispatch);\n  }\n};\n\nexport const updateCaseDescription = (\n  caseDescription: JSX.Element | undefined,\n  dispatch: IDispatch\n) => {\n  dispatch({\n    type: ACTION_TYPES.Update_Case_Description,\n    payload: { caseDescription },\n  });\n};\n\nexport const selectDisease = (selectedDisease: string, dispatch: IDispatch) => {\n  dispatch({\n    type: ACTION_TYPES.Set_Loading_Status,\n    payload: { isDrugLoading: true, isAttentionLoading: true },\n  });\n\n  dispatch({\n    type: ACTION_TYPES.Change_Disease,\n    payload: { selectedDisease },\n  });\n\n  dispatch({\n    type: ACTION_TYPES.Change_Drug,\n    payload: { selectedDrug: undefined },\n  });\n\n  return requestDrugPredictions(selectedDisease)\n    .then((res) => {\n      const predictions = res;\n      const drugPredictions = predictions.map((d: DrugPrediction) => {\n        return { ...d, selected: false };\n      });\n      dispatch({\n        type: ACTION_TYPES.Load_Drug_Options,\n        payload: { drugPredictions },\n      });\n    })\n    .then(() => {\n      dispatch({\n        type: ACTION_TYPES.Set_Loading_Status,\n        payload: { isDrugLoading: false, isAttentionLoading: false },\n      });\n    });\n};\n\nconst modifyAttentionPaths = (\n  selectedDrug: string | undefined,\n  selectedDisease: string | undefined,\n  isAdd: boolean,\n  dispatch: IDispatch\n) => {\n  if (selectedDrug !== undefined && selectedDisease !== undefined) {\n    if (isAdd) {\n      dispatch({\n        type: ACTION_TYPES.Set_Loading_Status,\n        payload: { isAttentionLoading: true },\n      });\n\n      return requestAttentionPair(selectedDisease, selectedDrug)\n        .then((res) => {\n          dispatch({\n            type: ACTION_TYPES.Add_Attention_Paths,\n            payload: {\n              attention: res.attention,\n              selectedDrug,\n              metaPathGroups: { [selectedDrug]: groupMetaPaths(res.paths) },\n            },\n          });\n        })\n        .then(() => {\n          dispatch({\n            type: ACTION_TYPES.Set_Loading_Status,\n            payload: { isAttentionLoading: false },\n          });\n        });\n    } else {\n      dispatch({\n        type: ACTION_TYPES.Del_Attention_Paths,\n        payload: {\n          selectedDrug,\n        },\n      });\n\n      return Promise.resolve();\n    }\n  }\n};\n\nconst changeDrug = (selectedDrug: string, dispatch: IDispatch) => {\n  dispatch({\n    type: ACTION_TYPES.Change_Drug,\n    payload: { selectedDrug },\n  });\n};\n\nconst groupMetaPaths = (paths: IPath[]): IMetaPath[] => {\n  let groups: IMetaPath[] = [];\n  let groupDict: string[] = [];\n  paths.forEach((path) => {\n    path.hide = false; // initi, show all metapaths\n    const nodeTypeString = path.nodes.map((d) => d.nodeType).join('_');\n    const groupIdx = groupDict.indexOf(nodeTypeString);\n    if (groupIdx > -1) {\n      groups[groupIdx].paths.push(path);\n    } else {\n      groupDict.push(nodeTypeString);\n      groups.push({\n        nodeTypes: path.nodes.map((d) => d.nodeType),\n        paths: [path],\n      });\n    }\n  });\n  return groups;\n};\n\nexport const toggleMetaPathHide = (\n  metaPathSummary: IMetaPathSummary[],\n  idx: number,\n  dispatch: IDispatch\n) => {\n  metaPathSummary[idx]['hide'] = !metaPathSummary[idx]['hide'];\n  if (metaPathSummary[idx]['hide']) {\n    metaPathSummary[idx]['expand'] = false; // if hide, then collapse\n  }\n  dispatch({\n    type: ACTION_TYPES.Toggle_Meta_Path_Hide,\n    payload: { metaPathSummary },\n  });\n};\n\nexport const toggleMetaPathExpand = (\n  metaPathSummary: IMetaPathSummary[],\n  idx: number,\n  dispatch: IDispatch\n) => {\n  metaPathSummary[idx]['expand'] = !metaPathSummary[idx]['expand'];\n  dispatch({\n    type: ACTION_TYPES.Toggle_Meta_Path_Hide,\n    payload: { metaPathSummary },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}