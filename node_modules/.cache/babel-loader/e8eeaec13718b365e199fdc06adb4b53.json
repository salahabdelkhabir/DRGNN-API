{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Explorer_V2\\\\src\\\\components\\\\TabContainer\\\\AttentionTree.tsx\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport { Tooltip } from 'antd';\nimport { getNodeColor, pruneEdge } from 'helpers';\nimport { cropText, VIRUS_ICON, DRUG_ICON, getTextWidth, LOADING_ICON } from 'helpers';\nexport default class AttentionTree extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.nodeHeight = 20;\n    this.fontSize = 14;\n    this.labelLength = 150;\n    this.midGap = 60;\n  }\n\n  // the gaph between two trees\n  drawNodeAttentionHorizontal(nodeAttention, stepGap, edgeThreshold) {\n    const {\n      width\n    } = this.props;\n    const {\n      nodeNameDict,\n      edgeTypes,\n      selectedPathNodes\n    } = this.props.globalState;\n    let nodeAttentionFiltered = pruneEdge(nodeAttention, edgeThreshold, 7);\n    const rootNode = d3.hierarchy(nodeAttentionFiltered);\n    const d3Tree = d3.tree().nodeSize([this.nodeHeight + 2, stepGap]);\n    const root = d3Tree(rootNode);\n    const linkGene = d3.linkHorizontal() // modify the source and target x, y to make space for node\n    .source(d => {\n      const newX = root.data.nodeType === 'drug' ? width / 2 - this.midGap / 2 - this.labelLength - d.source.y - this.labelLength / 2 : d.source.y + this.labelLength / 2;\n      const newY = d.source.x;\n      return {\n        x: newX,\n        y: newY\n      };\n    }).target(d => {\n      const newX = root.data.nodeType === 'drug' ? width / 2 - this.midGap / 2 - this.labelLength - d.target.y + this.labelLength / 2 : d.target.y - this.labelLength / 2;\n      const newY = d.target.x;\n      return {\n        x: newX,\n        y: newY\n      };\n    }).x(d => d.x).y(d => d.y);\n    const maxScore = Math.max(...root.links().map(link => link.target.data.score));\n    let widthScale = d3.scaleLinear().domain([0, maxScore]).range([1, 5]);\n    const links = root.links().map((link, i) => {\n      let edgeInfo = link.target.data.edgeInfo.replace('rev_', '');\n\n      if (edgeTypes[edgeInfo]) {\n        edgeInfo = edgeTypes[edgeInfo]['edgeInfo'] || edgeInfo;\n      }\n\n      return /*#__PURE__*/React.createElement(Tooltip, {\n        title: edgeInfo,\n        key: `${link.source.data.nodeId}=>${link.target.data.nodeId}_link${i}`,\n        destroyTooltipOnHide: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"g\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: linkGene(link),\n        className: `link ${link.source.data.nodeId}=>${link.target.data.nodeId}`,\n        fill: \"none\",\n        stroke: \"gray\",\n        strokeWidth: widthScale(link.target.data.score),\n        opacity: selectedPathNodes.length > 0 ? 0.5 : 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"path\", {\n        d: linkGene(link),\n        className: \"mask\",\n        fill: \"none\",\n        stroke: \"transparent\",\n        strokeWidth: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      })));\n    });\n    const allY = root.descendants().map(node => node.x);\n    const minY = Math.min(...allY);\n    const maxY = Math.max(...allY);\n    const height = maxY - minY + this.nodeHeight + 4; // default seperation in d3 tree is 2\n\n    const nodes = root.descendants().map((node, i) => {\n      let {\n        nodeId,\n        nodeType\n      } = node.data;\n      let nodeFullName = nodeNameDict[nodeType][nodeId];\n\n      if (nodeFullName === undefined) {\n        nodeId = nodeId.replace(/_/g, '') + '.0'; // the id of a merged node is xxx_xxx_xxxx\n\n        nodeFullName = nodeNameDict[nodeType][nodeId];\n      }\n\n      let nodeShortName = cropText(nodeFullName, 12, this.labelLength - 25 - getTextWidth('..(0.00)', 14));\n      let tooltipTitle = (nodeShortName === null || nodeShortName === void 0 ? void 0 : nodeShortName.includes('..')) ? nodeFullName : '';\n      let icon_path = '';\n      if (nodeType === 'disease') icon_path = VIRUS_ICON;\n      if (nodeType === 'drug') icon_path = DRUG_ICON;\n      const isHighlighted = selectedPathNodes.length === 0 || selectedPathNodes.map(d => d.nodeType).includes(nodeType) && selectedPathNodes.map(d => d.nodeId).includes(nodeId);\n      return /*#__PURE__*/React.createElement(Tooltip, {\n        title: tooltipTitle,\n        key: `node${i}_${nodeFullName}`,\n        destroyTooltipOnHide: true,\n        mouseEnterDelay: 0.3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"g\", {\n        className: `${nodeId} node`,\n        transform: `translate(${root.data.nodeType === 'drug' ? width / 2 - this.midGap / 2 - this.labelLength - node.y : node.y}, ${node.x})`,\n        cursor: \"pointer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"rect\", {\n        width: this.labelLength,\n        height: this.nodeHeight,\n        fill: getNodeColor(nodeType),\n        x: -1 * this.labelLength / 2,\n        y: -this.nodeHeight / 2,\n        opacity: isHighlighted ? 1 : 0.2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"path\", {\n        className: \"virus_icon\",\n        d: icon_path,\n        transform: `translate(${-1 * this.labelLength / 2 + 2}, ${-this.nodeHeight / 2}) scale(0.04)`,\n        fill: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"text\", {\n        fill: \"white\",\n        fontSize: this.fontSize,\n        transform: `translate(${-1 * this.labelLength / 2 + 25}, ${(this.nodeHeight - this.fontSize) / 2})`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }\n      }, nodeShortName)));\n    });\n    return {\n      content: [/*#__PURE__*/React.createElement(\"g\", {\n        key: \"links\",\n        className: \"links\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }\n      }, links), /*#__PURE__*/React.createElement(\"g\", {\n        key: \"nodes\",\n        className: \"nodes\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }, nodes)],\n      height: height\n    };\n  }\n\n  drawSubgraph() {\n    let {\n      attention,\n      edgeThreshold\n    } = this.props.globalState;\n    let {\n      width\n    } = this.props;\n    let stepGap = (width - 2 * this.labelLength - this.midGap) / 4;\n    let heights = [0];\n    const content = Object.keys(attention).map((nodeKey, idx) => {\n      const {\n        height,\n        content\n      } = this.drawNodeAttentionHorizontal(attention[nodeKey], stepGap, edgeThreshold);\n      heights.push(height);\n      return /*#__PURE__*/React.createElement(\"g\", {\n        className: nodeKey,\n        key: nodeKey,\n        transform: `translate(${(width + this.midGap) / 2 * idx + this.labelLength / 2}, ${height / 2 + 2 * this.nodeHeight})`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 9\n        }\n      }, content);\n    });\n    return {\n      content,\n      height: Math.max(...heights)\n    };\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      globalState\n    } = this.props;\n    const {\n      isAttentionLoading,\n      selectedDisease,\n      drugPredictions\n    } = globalState;\n    const selectedDrugs = drugPredictions.filter(d => d.selected);\n    const {\n      content,\n      height: graphHeight\n    } = this.drawSubgraph();\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: Math.max(graphHeight, height),\n      className: \"nodeLink\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 7\n      }\n    }, selectedDrugs.length > 0 && selectedDisease ? content : /*#__PURE__*/React.createElement(\"text\", {\n      x: width / 2,\n      y: height / 2,\n      fill: \"gray\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }, \"Please select a disease and a drug first\"), isAttentionLoading ? /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      width: width,\n      height: height,\n      fill: \"white\",\n      opacity: 0.5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${width / 2}, ${height / 2})`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }\n    }, LOADING_ICON)) : /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/components/TabContainer/AttentionTree.tsx"],"names":["React","d3","Tooltip","getNodeColor","pruneEdge","cropText","VIRUS_ICON","DRUG_ICON","getTextWidth","LOADING_ICON","AttentionTree","Component","nodeHeight","fontSize","labelLength","midGap","drawNodeAttentionHorizontal","nodeAttention","stepGap","edgeThreshold","width","props","nodeNameDict","edgeTypes","selectedPathNodes","globalState","nodeAttentionFiltered","rootNode","hierarchy","d3Tree","tree","nodeSize","root","linkGene","linkHorizontal","source","d","newX","data","nodeType","y","newY","x","target","maxScore","Math","max","links","map","link","score","widthScale","scaleLinear","domain","range","i","edgeInfo","replace","nodeId","length","allY","descendants","node","minY","min","maxY","height","nodes","nodeFullName","undefined","nodeShortName","tooltipTitle","includes","icon_path","isHighlighted","content","drawSubgraph","attention","heights","Object","keys","nodeKey","idx","push","render","isAttentionLoading","selectedDisease","drugPredictions","selectedDrugs","filter","selected","graphHeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { IState, IAttentionTree } from 'types';\nimport * as d3 from 'd3';\nimport { Tooltip } from 'antd';\nimport { getNodeColor, pruneEdge } from 'helpers';\nimport {\n  cropText,\n  VIRUS_ICON,\n  DRUG_ICON,\n  getTextWidth,\n  LOADING_ICON,\n} from 'helpers';\n\ninterface Props {\n  width: number;\n  height: number;\n  globalState: IState;\n}\n\nexport default class AttentionTree extends React.Component<Props, {}> {\n  nodeHeight = 20;\n  fontSize = 14;\n  labelLength = 150;\n  midGap = 60; // the gaph between two trees\n  drawNodeAttentionHorizontal(\n    nodeAttention: IAttentionTree,\n    stepGap: number,\n    edgeThreshold: number\n  ) {\n    const { width } = this.props;\n    const {\n      nodeNameDict,\n      edgeTypes,\n      selectedPathNodes,\n    } = this.props.globalState;\n\n    let nodeAttentionFiltered = pruneEdge(nodeAttention, edgeThreshold, 7);\n\n    const rootNode = d3.hierarchy(nodeAttentionFiltered);\n    const d3Tree = d3\n      .tree<IAttentionTree>()\n      .nodeSize([this.nodeHeight + 2, stepGap]);\n\n    const root = d3Tree(rootNode);\n\n    const linkGene = d3\n      .linkHorizontal<any, d3.HierarchyPointLink<IAttentionTree>, any>()\n      // modify the source and target x, y to make space for node\n      .source((d) => {\n        const newX =\n          root.data.nodeType === 'drug'\n            ? width / 2 -\n              this.midGap / 2 -\n              this.labelLength -\n              d.source.y -\n              this.labelLength / 2\n            : d.source.y + this.labelLength / 2;\n        const newY = d.source.x;\n\n        return { x: newX, y: newY };\n      })\n      .target((d) => {\n        const newX =\n          root.data.nodeType === 'drug'\n            ? width / 2 -\n              this.midGap / 2 -\n              this.labelLength -\n              d.target.y +\n              this.labelLength / 2\n            : d.target.y - this.labelLength / 2;\n        const newY = d.target.x;\n\n        return { x: newX, y: newY };\n      })\n      .x((d) => d.x)\n      .y((d) => d.y);\n\n    const maxScore = Math.max(\n      ...root.links().map((link) => link.target.data.score)\n    );\n\n    let widthScale = d3.scaleLinear().domain([0, maxScore]).range([1, 5]);\n\n    const links = root.links().map((link, i) => {\n      let edgeInfo = link.target.data.edgeInfo.replace('rev_', '');\n      if (edgeTypes[edgeInfo]) {\n        edgeInfo = edgeTypes[edgeInfo]['edgeInfo'] || edgeInfo;\n      }\n      return (\n        <Tooltip\n          title={edgeInfo}\n          key={`${link.source.data.nodeId}=>${link.target.data.nodeId}_link${i}`}\n          destroyTooltipOnHide\n        >\n          <g>\n            <path\n              d={linkGene(link)!}\n              className={`link ${link.source.data.nodeId}=>${link.target.data.nodeId}`}\n              fill=\"none\"\n              stroke=\"gray\"\n              strokeWidth={widthScale(link.target.data.score)}\n              opacity={selectedPathNodes.length > 0 ? 0.5 : 1}\n            />\n            <path\n              d={linkGene(link)!}\n              className=\"mask\"\n              fill=\"none\"\n              stroke=\"transparent\"\n              strokeWidth=\"3\"\n            />\n          </g>\n        </Tooltip>\n      );\n    });\n\n    const allY = root.descendants().map((node) => node.x);\n    const minY = Math.min(...allY);\n    const maxY = Math.max(...allY);\n\n    const height = maxY - minY + this.nodeHeight + 4; // default seperation in d3 tree is 2\n\n    const nodes = root.descendants().map((node, i) => {\n      let { nodeId, nodeType } = node.data;\n      let nodeFullName = nodeNameDict[nodeType][nodeId];\n      if (nodeFullName === undefined) {\n        nodeId = nodeId.replace(/_/g, '') + '.0'; // the id of a merged node is xxx_xxx_xxxx\n        nodeFullName = nodeNameDict[nodeType][nodeId];\n      }\n      let nodeShortName = cropText(\n        nodeFullName,\n        12,\n        this.labelLength - 25 - getTextWidth('..(0.00)', 14)\n      );\n      let tooltipTitle = nodeShortName?.includes('..') ? nodeFullName : '';\n      let icon_path = '';\n      if (nodeType === 'disease') icon_path = VIRUS_ICON;\n      if (nodeType === 'drug') icon_path = DRUG_ICON;\n\n      const isHighlighted =\n        selectedPathNodes.length === 0 ||\n        (selectedPathNodes.map((d) => d.nodeType).includes(nodeType) &&\n          selectedPathNodes.map((d) => d.nodeId).includes(nodeId));\n\n      return (\n        <Tooltip\n          title={tooltipTitle}\n          key={`node${i}_${nodeFullName}`}\n          destroyTooltipOnHide\n          mouseEnterDelay={0.3}\n        >\n          <g\n            className={`${nodeId} node`}\n            transform={`translate(${\n              root.data.nodeType === 'drug'\n                ? width / 2 - this.midGap / 2 - this.labelLength - node.y\n                : node.y\n            }, ${node.x})`}\n            cursor=\"pointer\"\n          >\n            <rect\n              width={this.labelLength}\n              height={this.nodeHeight}\n              fill={getNodeColor(nodeType)}\n              x={(-1 * this.labelLength) / 2}\n              y={-this.nodeHeight / 2}\n              opacity={isHighlighted ? 1 : 0.2}\n            />\n            <path\n              className=\"virus_icon\"\n              d={icon_path}\n              transform={`translate(${(-1 * this.labelLength) / 2 + 2}, ${\n                -this.nodeHeight / 2\n              }) scale(0.04)`}\n              fill=\"white\"\n            />\n            <text\n              fill=\"white\"\n              fontSize={this.fontSize}\n              transform={`translate(${(-1 * this.labelLength) / 2 + 25}, ${\n                (this.nodeHeight - this.fontSize) / 2\n              })`}\n            >\n              {/* {`${nodeShortName}\n                  ${node.depth > 0 ? ':' + node.data.score.toFixed(2) : ''}`} */}\n              {nodeShortName}\n            </text>\n          </g>\n        </Tooltip>\n      );\n    });\n\n    return {\n      content: [\n        <g key=\"links\" className=\"links\">\n          {links}\n        </g>,\n        <g key=\"nodes\" className=\"nodes\">\n          {nodes}\n        </g>,\n      ],\n      height: height,\n    };\n  }\n  drawSubgraph() {\n    let { attention, edgeThreshold } = this.props.globalState;\n    let { width } = this.props;\n\n    let stepGap = (width - 2 * this.labelLength - this.midGap) / 4;\n    let heights = [0];\n    const content = Object.keys(attention).map((nodeKey: string, idx) => {\n      const { height, content } = this.drawNodeAttentionHorizontal(\n        attention[nodeKey],\n        stepGap,\n        edgeThreshold\n      );\n      heights.push(height);\n      return (\n        <g\n          className={nodeKey}\n          key={nodeKey}\n          transform={`translate(${\n            ((width + this.midGap) / 2) * idx + this.labelLength / 2\n          }, ${height / 2 + 2 * this.nodeHeight})`}\n        >\n          {content}\n        </g>\n      );\n    });\n    return { content, height: Math.max(...heights) };\n  }\n  render() {\n    const { width, height, globalState } = this.props;\n    const {\n      isAttentionLoading,\n      selectedDisease,\n      drugPredictions,\n    } = globalState;\n    const selectedDrugs = drugPredictions.filter((d) => d.selected);\n\n    const { content, height: graphHeight } = this.drawSubgraph();\n    return (\n      <svg\n        width={width}\n        height={Math.max(graphHeight, height)}\n        className=\"nodeLink\"\n      >\n        {selectedDrugs.length > 0 && selectedDisease ? (\n          content\n        ) : (\n          <text x={width / 2} y={height / 2} fill=\"gray\">\n            Please select a disease and a drug first\n          </text>\n        )}\n        {isAttentionLoading ? (\n          <g>\n            <rect width={width} height={height} fill=\"white\" opacity={0.5} />\n            <g\n              transform={`translate(${width / 2}, ${height / 2})`}\n              textAnchor=\"middle\"\n            >\n              {LOADING_ICON}\n            </g>\n          </g>\n        ) : (\n          <g />\n        )}\n      </svg>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}