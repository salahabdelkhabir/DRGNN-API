{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Explorer_V2\\\\src\\\\components\\\\TabContainer\\\\PathMatrix.tsx\";\nimport { Tooltip, Modal, Skeleton, Popover, Button } from 'antd';\nimport { cropText, YES_ICON, NO_ICON } from 'helpers';\nimport { getNodeColor } from 'helpers/color';\nimport { ACTION_TYPES, selectDrug, toggleMetaPathHide, toggleMetaPathExpand } from 'stores/actions';\nimport { isAddDrug } from 'stores/reducer';\nimport React from 'react';\nimport { StateConsumer } from 'stores';\nimport * as d3 from 'd3';\nimport './index.css';\n\nclass PathMatrix extends React.Component {\n  // vertical gap between path\n  // vertical gap between path groups\n  // horizontal gap between count circles\n  // max radius of the count circle\n  // height of the header ()\n  // width of the expand triangle icon\n  // record the height of the expand meta paths\n  constructor(prop) {\n    super(prop);\n    this.TITLE_HEIGHT = 36;\n    this.MARGIN = 10;\n    this.PADDING = 10;\n    this.EDGE_LENGTH = 120;\n    this.NODE_WIDTH = 130;\n    this.NODE_HEIGHT = 25;\n    this.VERTICAL_GAP = 2;\n    this.GROUP_GAP = 6;\n    this.COUNT_GAP = 5;\n    this.RADIUS = this.NODE_HEIGHT / 2;\n    this.HEAD_HEIGHT = 70;\n    this.ICON_GAP = 20;\n    this.offsetY = 0;\n    this.state = {\n      isModalVisible: false\n    };\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n    this.filterMetaPathGroups = this.filterMetaPathGroups.bind(this);\n  }\n\n  isPathSelected(nodes) {\n    const {\n      selectedPathNodes\n    } = this.props.globalState;\n    const doesExist = selectedPathNodes.map(d => d.nodeId).join() === nodes.map(d => d.nodeId).join() && selectedPathNodes.map(d => d.nodeType).join() === nodes.map(d => d.nodeType).join();\n    return doesExist;\n  }\n\n  togglePathNodes(nodes, doesExist) {\n    if (doesExist) {\n      this.props.dispatch({\n        type: ACTION_TYPES.Select_Path_Noes,\n        payload: {\n          selectedPathNodes: []\n        }\n      });\n    } else {\n      this.props.dispatch({\n        type: ACTION_TYPES.Select_Path_Noes,\n        payload: {\n          selectedPathNodes: nodes\n        }\n      });\n    }\n  }\n\n  getMetaIconGroup(toggleHideFunc, isHide) {\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"feedback\",\n      cursor: \"pointer\",\n      style: {\n        fill: '#777'\n      },\n      transform: `translate(5, 0)`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      className: \"yes\",\n      transform: `translate(${0 * this.ICON_GAP}, 0)`,\n      onClick: () => toggleHideFunc(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      width: this.ICON_GAP,\n      height: this.ICON_GAP,\n      fill: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"path\", {\n      d: isHide ? YES_ICON : NO_ICON,\n      transform: `scale(0.03)`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  getIconGroup(nodes) {\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"feedback\",\n      cursor: \"pointer\",\n      style: {\n        fill: '#777'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    });\n  }\n\n  drawHeader() {\n    const {\n      drugPredictions,\n      nodeNameDict\n    } = this.props.globalState;\n    const headerNames = drugPredictions.filter(d => d.selected).map(drug => nodeNameDict['drug'][drug.id]); // headerNames.push('SUM');\n\n    const header = headerNames.map((name, idx) => {\n      // const isSelected =\n      //   idx > drugPredictions.length - 1\n      //     ? false\n      //     : drugPredictions[idx].selected;\n      return /*#__PURE__*/React.createElement(\"text\", {\n        key: name,\n        className: name,\n        fill: 'gray',\n        cursor: \"pointer\",\n        transform: `translate(\n            ${idx * (this.RADIUS * 2 + this.COUNT_GAP) + this.RADIUS}, \n            ${this.HEAD_HEIGHT}) \n            rotate(-45)`,\n        onClick: () => {\n          if (idx < drugPredictions.length) this.onChangeDrug(drugPredictions[idx].id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }\n      }, name);\n    });\n    return header;\n  }\n\n  getCountWidth() {\n    const width = this.props.globalState.drugPredictions.filter(d => d.selected).length * (this.RADIUS * 2 + this.COUNT_GAP) + this.COUNT_GAP;\n    return width;\n  }\n\n  drawSummary() {\n    let {\n      EDGE_LENGTH,\n      NODE_WIDTH,\n      NODE_HEIGHT,\n      VERTICAL_GAP\n    } = this;\n    let {\n      metaPathSummary,\n      drugPredictions\n    } = this.props.globalState;\n    const COUNT_WIDTH = this.getCountWidth();\n    let metaPathGroups = this.filterMetaPathGroups();\n    const triangleRight = 'M 9 17.879 V 6.707 A 1 1 0 0 1 10.707 6 l 5.586 5.586 a 1 1 0 0 1 0 1.414 l -5.586 5.586 A 1 1 0 0 1 9 17.879 Z',\n          triangelBottom = 'M 6.414 9 h 11.172 a 1 1 0 0 1 0.707 1.707 l -5.586 5.586 a 1 1 0 0 1 -1.414 0 l -5.586 -5.586 A 1 1 0 0 1 6.414 9 Z';\n    const maxCount = Math.max(...metaPathSummary.map(d => Object.values(d.count)).flat());\n    const rScale = d3.scaleLinear().range([this.RADIUS / 3, this.RADIUS]).domain([0, maxCount]);\n    this.offsetY = 0;\n    const allRows = [...metaPathSummary].sort((a, b) => (a.hide ? 1 : 0) - (b.hide ? 1 : 0)).map(summary => {\n      let nodes = summary.nodeTypes.map((node, nodeIdx) => {\n        let translate = `translate(${(EDGE_LENGTH + NODE_WIDTH) * nodeIdx}, ${0})`;\n        return /*#__PURE__*/React.createElement(\"g\", {\n          key: `node_${nodeIdx}`,\n          transform: translate,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"rect\", {\n          width: NODE_WIDTH,\n          height: NODE_HEIGHT,\n          fill: \"white\",\n          strokeWidth: \"3\",\n          stroke: getNodeColor(node),\n          rx: this.NODE_HEIGHT / 2,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"text\", {\n          textAnchor: \"middle\",\n          y: NODE_HEIGHT / 2 + 6,\n          x: NODE_WIDTH / 2,\n          fill: \"black\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }\n        }, node));\n      });\n      let edges = [...Array(nodes.length - 1)].map((_, edgeIdx) => {\n        let translate = `translate(${NODE_WIDTH + (EDGE_LENGTH + NODE_WIDTH) * edgeIdx}, ${+NODE_HEIGHT / 2})`;\n        return /*#__PURE__*/React.createElement(\"g\", {\n          key: `edge_${edgeIdx}`,\n          transform: translate,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"line\", {\n          stroke: \"lightgray\" // strokeWidth={1+Math.random() * 8}\n          ,\n          strokeWidth: 2,\n          x1: 0,\n          y1: 0,\n          x2: EDGE_LENGTH,\n          y2: 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }\n        }));\n      });\n      let currentY = this.offsetY;\n      this.offsetY += NODE_HEIGHT + VERTICAL_GAP;\n      let differentChildren = [];\n      let childrenOffsetY = 0;\n      const showChildren = summary.expand;\n      let lastMetaPath = undefined;\n      Object.keys(metaPathGroups).forEach(drugId => {\n        var _metaPathGroup$filter;\n\n        const metaPathGroup = metaPathGroups[drugId];\n        const metaPaths = ((_metaPathGroup$filter = metaPathGroup.filter(d => d.nodeTypes.join('') === summary.nodeTypes.join(''))[0]) === null || _metaPathGroup$filter === void 0 ? void 0 : _metaPathGroup$filter.paths) || [];\n        const drugRank = drugPredictions.filter(d => d.selected).map(d => d.id).indexOf(drugId);\n        const {\n          children,\n          numOfChildren\n        } = this.drawChildrenPaths(metaPaths, drugRank, lastMetaPath);\n        lastMetaPath = metaPaths[metaPaths.length - 1];\n        const childrenHeight = (NODE_HEIGHT + VERTICAL_GAP) * numOfChildren;\n        differentChildren.push( /*#__PURE__*/React.createElement(\"g\", {\n          key: `drugRank: ${drugRank}`,\n          className: `drugRank_${drugRank}`,\n          transform: `translate(0, ${childrenOffsetY})`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }\n        }, children));\n        childrenOffsetY += childrenHeight;\n\n        if (showChildren) {\n          this.offsetY += childrenHeight;\n        }\n\n        this.offsetY += this.GROUP_GAP;\n      });\n\n      const toggleHideFunc = () => {\n        toggleMetaPathHide(metaPathSummary, summary.idx, this.props.dispatch);\n      };\n\n      const toggleExpandFunc = () => {\n        toggleMetaPathExpand(metaPathSummary, summary.idx, this.props.dispatch);\n      };\n\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: `prototype_${summary.idx}`,\n        transform: `translate(${0}, ${currentY})`,\n        opacity: summary.hide ? 0.4 : 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"g\", {\n        className: \"metaCount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }\n      }, this.drawMetaCount(summary, rScale)), /*#__PURE__*/React.createElement(\"g\", {\n        className: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: showChildren ? triangelBottom : triangleRight,\n        transform: `translate(${COUNT_WIDTH}, 0)`,\n        fill: \"gray\",\n        onClick: toggleExpandFunc,\n        cursor: \"pointer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"g\", {\n        className: \"prototype\",\n        transform: `translate(${COUNT_WIDTH + this.ICON_GAP}, 0)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }\n      }, nodes, edges, /*#__PURE__*/React.createElement(\"g\", {\n        className: \"iconGroup\",\n        transform: `translate(${NODE_WIDTH * nodes.length + EDGE_LENGTH * edges.length}, 0)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }\n      }, this.getMetaIconGroup(toggleHideFunc, summary.hide))), /*#__PURE__*/React.createElement(\"g\", {\n        className: \"metapaths\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }\n      }, showChildren ? differentChildren : /*#__PURE__*/React.createElement(\"g\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 51\n        }\n      })));\n    });\n    const header = this.drawHeader();\n    const content = /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      className: \"header\",\n      transform: `translate(${this.PADDING}, ${this.PADDING})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }\n    }, header), /*#__PURE__*/React.createElement(\"g\", {\n      className: \"rows\",\n      transform: `translate(${0}, ${this.PADDING + this.HEAD_HEIGHT})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }\n    }, allRows));\n    return content;\n  }\n\n  onChangeDrug(selectedDrug) {\n    const isAdd = isAddDrug(this.props.globalState.drugPredictions, selectedDrug);\n    selectDrug(selectedDrug, this.props.globalState.selectedDisease, isAdd, this.props.dispatch);\n  } // componentDidUpdate(prevProps: Props) {\n  //   // if (\n  //   //   // when disease changed, collapse all meta paths\n  //   //   prevProps.globalState.selectedDisease !==\n  //   //   this.props.globalState.selectedDisease\n  //   // ) {\n  //   //   this.setState({\n  //   //     expand: this.props.globalState.metaPathSummary.map((d) => false),\n  //   //   });\n  //   // } else\n  //   if (\n  //     prevProps.globalState.drugPredictions.filter((d) => d.selected).length !==\n  //     this.props.globalState.drugPredictions.filter((d) => d.selected).length\n  //   ) {\n  //     // update expended metapaths when selected drug changes\n  //     const { metaPathSummary } = this.props.globalState;\n  //     // const expandStatus = metaPathSummary.map(\n  //     //   (d) =>\n  //     //     Object.values(d.count).reduce(\n  //     //       (acc, cur, i) => acc + cur * (drugPredictions[i].selected ? 1 : 0),\n  //     //       0\n  //     //     ) > 0 && !d.hide\n  //     // );\n  //   }\n  // }\n\n\n  drawMetaCount(summary, rScale) {\n    const {\n      drugPredictions,\n      isAttentionLoading,\n      metaPathGroups,\n      edgeThreshold\n    } = this.props.globalState;\n    const {\n      count,\n      nodeTypes\n    } = summary;\n    const vis = drugPredictions.filter(d => d.selected).map((drugPrediction, idx) => {\n      var _metaPathGroups$drugI;\n\n      const {\n        id: drugId\n      } = drugPrediction; // const num = count[drugId]\n      //   ? count[drugId]\n      //   : isAttentionLoading\n      //   ? '...'\n      //   : 0;\n\n      const metaPath = (_metaPathGroups$drugI = metaPathGroups[drugId]) === null || _metaPathGroups$drugI === void 0 ? void 0 : _metaPathGroups$drugI.find(d => d.nodeTypes.join(',') === nodeTypes.join(','));\n      const num = metaPath ? metaPath.paths.filter(path => path.edges.every(e => e.score >= edgeThreshold)).length : isAttentionLoading ? '...' : 0;\n      const content = /*#__PURE__*/React.createElement(\"text\", {\n        textAnchor: \"middle\",\n        transform: `translate(${this.RADIUS}, ${this.RADIUS / 2})`,\n        fontSize: 15,\n        fill: 'gray',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }\n      }, num);\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: idx,\n        className: \"count\",\n        transform: `translate(${idx * (2 * this.RADIUS + this.COUNT_GAP)}, ${this.NODE_HEIGHT / 2})`,\n        cursor: \"pointer\",\n        onClick: () => this.onChangeDrug(drugId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }\n      }, content);\n    });\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"metaCount\",\n      transform: `translate(${this.PADDING}, 0)`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 7\n      }\n    }, vis);\n  }\n\n  drawChildrenPaths(metaPaths, drugRank, prevPath) {\n    const {\n      nodeNameDict,\n      edgeTypes,\n      edgeThreshold\n    } = this.props.globalState;\n    const COUNT_WIDTH = this.getCountWidth();\n    const filteredMetaPaths = metaPaths.filter(metaPath => metaPath.edges.every(e => e.score >= edgeThreshold));\n    const children = filteredMetaPaths.map((metaPath, childIdx) => {\n      const nodes = metaPath.nodes.map((node, nodeIdx) => {\n        const {\n          nodeId,\n          nodeType\n        } = node;\n        const nodeName = nodeNameDict[nodeType][nodeId];\n        let prevNodeName = '';\n\n        if (childIdx > 0) {\n          prevPath = metaPaths[childIdx - 1];\n        }\n\n        if (prevPath !== undefined) {\n          const {\n            nodeId: prevNodeId,\n            nodeType: prevNodeType\n          } = prevPath.nodes[nodeIdx];\n          prevNodeName = nodeNameDict[prevNodeType][prevNodeId];\n        }\n\n        let shortNodeName = nodeName === prevNodeName ? '〃' : cropText(nodeName, 14, this.NODE_WIDTH - 10) || 'undefined';\n        let translate = `translate(${(this.EDGE_LENGTH + this.NODE_WIDTH) * nodeIdx}, ${0})`;\n        return /*#__PURE__*/React.createElement(Tooltip, {\n          key: `node_${nodeIdx}`,\n          title: shortNodeName.includes('.') ? nodeName : '',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"g\", {\n          transform: translate,\n          className: `node_${nodeId}`,\n          style: {\n            cursor: 'pointer'\n          },\n          onClick: () => nodeType === 'drug' && window.open(`https://go.drugbank.com/drugs/${nodeId}`, 'windowName', 'popup,right=10,top=10,width=320,height=600'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"rect\", {\n          width: this.NODE_WIDTH,\n          height: this.NODE_HEIGHT,\n          fill: getNodeColor(nodeType),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"text\", {\n          textAnchor: \"middle\",\n          y: this.NODE_HEIGHT / 2 + 6,\n          x: this.NODE_WIDTH / 2,\n          fill: \"white\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 15\n          }\n        }, shortNodeName)));\n      });\n      const edges = metaPath.edges.map((edge, edgeIdx) => {\n        var _edgeTypes$edgeName;\n\n        const translate = `translate(${this.NODE_WIDTH + (this.EDGE_LENGTH + this.NODE_WIDTH) * edgeIdx}, ${+this.NODE_HEIGHT / 2})`;\n        let edgeName = edge.edgeInfo.replace('rev_', '');\n        edgeName = ((_edgeTypes$edgeName = edgeTypes[edgeName]) === null || _edgeTypes$edgeName === void 0 ? void 0 : _edgeTypes$edgeName.edgeInfo) || edgeName;\n        const edgeShortName = cropText(edgeName, 14, this.EDGE_LENGTH);\n        return /*#__PURE__*/React.createElement(Tooltip, {\n          title: edgeShortName === edgeName ? '' : edgeName,\n          destroyTooltipOnHide: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"g\", {\n          key: `edge_${edgeIdx}`,\n          transform: translate,\n          style: {\n            cursor: 'pointer'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(\"line\", {\n          stroke: \"gray\",\n          strokeWidth: 1 + edge.score * 0.7,\n          x1: 0,\n          y1: this.NODE_HEIGHT / 4,\n          x2: this.EDGE_LENGTH,\n          y2: this.NODE_HEIGHT / 4,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"text\", {\n          x: this.EDGE_LENGTH / 2,\n          y: 0,\n          textAnchor: \"middle\",\n          fill: \"gray\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }\n        }, edgeShortName)));\n      });\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: childIdx,\n        transform: `translate(0, ${(this.NODE_HEIGHT + this.VERTICAL_GAP) * (1 + childIdx)})`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"circle\", {\n        cx: drugRank * (2 * this.RADIUS + this.COUNT_GAP) + this.RADIUS + this.PADDING,\n        cy: this.NODE_HEIGHT / 2,\n        fill: \"gray\",\n        r: this.RADIUS / 4,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"g\", {\n        transform: `translate(${COUNT_WIDTH + this.ICON_GAP}, 0)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }\n      }, nodes, edges, /*#__PURE__*/React.createElement(\"g\", {\n        className: \"iconGroup\",\n        transform: `translate(${this.NODE_WIDTH * nodes.length + this.EDGE_LENGTH * edges.length}, 0)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 13\n        }\n      }, this.getIconGroup(metaPath.nodes))));\n    });\n    return {\n      children,\n      numOfChildren: filteredMetaPaths.length\n    };\n  }\n\n  showModal() {\n    this.setState({\n      isModalVisible: true\n    });\n  }\n\n  hideModal() {\n    this.setState({\n      isModalVisible: false\n    });\n  }\n\n  filterMetaPathGroups() {\n    let {\n      metaPathGroups,\n      edgeThreshold\n    } = this.props.globalState;\n    let filteredMetaGroups = {};\n    Object.keys(metaPathGroups).forEach(k => {\n      filteredMetaGroups[k] = metaPathGroups[k].map(metaPathGroup => {\n        const metaPaths = metaPathGroup.paths.filter(path => path.edges.every(e => e.score > edgeThreshold));\n        return { ...metaPathGroup,\n          metaPaths\n        };\n      });\n    });\n    Object.keys(filteredMetaGroups).forEach(k => {\n      filteredMetaGroups[k] = filteredMetaGroups[k].filter(metaPathGroup => metaPathGroup.paths.length > 0);\n    });\n    return filteredMetaGroups;\n  }\n\n  render() {\n    const {\n      width,\n      height\n    } = this.props,\n          {\n      isModalVisible\n    } = this.state;\n    const {\n      isDrugLoading,\n      isInitializing,\n      isAttentionLoading,\n      metaPathSummary,\n      selectedDisease,\n      drugPredictions\n    } = this.props.globalState;\n    const svgWidth = Math.max(width - 2 * this.PADDING - 2 * this.MARGIN, this.getCountWidth() + this.ICON_GAP * 5 + this.NODE_WIDTH + (this.EDGE_LENGTH + this.NODE_WIDTH) * 4);\n    const matrixRowsCount = Object.values(metaPathSummary).map((d, idx) => {\n      return d['expand'] ? d.sum : 0;\n    }).reduce((a, b) => a + b, 0),\n          matrixGroupsCount = Object.keys(metaPathSummary).length,\n          matrixHeight = matrixRowsCount * (this.NODE_HEIGHT + this.VERTICAL_GAP) + this.PADDING + matrixGroupsCount * (this.HEAD_HEIGHT + this.GROUP_GAP);\n    const svgOuterHeight = height - this.TITLE_HEIGHT,\n          svgHeight = Math.max(matrixHeight + this.HEAD_HEIGHT, svgOuterHeight);\n    const reminderText = /*#__PURE__*/React.createElement(\"text\", {\n      x: width / 2,\n      y: height / 2,\n      fill: \"gray\",\n      textAnchor: \"middle\",\n      fontSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 7\n      }\n    }, isAttentionLoading ? '' : typeof selectedDisease == 'string' && drugPredictions.filter(d => d.selected).length > 0 ? 'Sorry, we find no meta path with current computational resources.' : 'Please select a disease and at least one drug');\n    const metaPaths = this.drawSummary();\n    const content = metaPathSummary.length === 0 ? reminderText : metaPaths;\n\n    if (isInitializing) {\n      return /*#__PURE__*/React.createElement(Skeleton, {\n        active: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 14\n        }\n      });\n    }\n\n    const {\n      caseDescription\n    } = this.props.globalState;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, caseDescription && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"caseReadmore\",\n      style: {\n        position: 'fixed',\n        bottom: height,\n        right: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Popover, {\n      content: /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          wordWrap: 'break-word'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 17\n        }\n      }, this.props.globalState.caseDescription),\n      placement: \"topLeft\",\n      overlayStyle: {\n        width: '60vw',\n        right: '20vw'\n      },\n      trigger: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 15\n      }\n    }, \"Read more about this case\"))), /*#__PURE__*/React.createElement(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }\n    }, content), /*#__PURE__*/React.createElement(Modal, {\n      title: \"Edit Explanation\",\n      visible: isModalVisible,\n      onOk: this.hideModal,\n      onCancel: this.hideModal,\n      okText: \"Confirm\",\n      width: width,\n      zIndex: 1999,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default StateConsumer(PathMatrix);","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/components/TabContainer/PathMatrix.tsx"],"names":["Tooltip","Modal","Skeleton","Popover","Button","cropText","YES_ICON","NO_ICON","getNodeColor","ACTION_TYPES","selectDrug","toggleMetaPathHide","toggleMetaPathExpand","isAddDrug","React","StateConsumer","d3","PathMatrix","Component","constructor","prop","TITLE_HEIGHT","MARGIN","PADDING","EDGE_LENGTH","NODE_WIDTH","NODE_HEIGHT","VERTICAL_GAP","GROUP_GAP","COUNT_GAP","RADIUS","HEAD_HEIGHT","ICON_GAP","offsetY","state","isModalVisible","showModal","bind","hideModal","filterMetaPathGroups","isPathSelected","nodes","selectedPathNodes","props","globalState","doesExist","map","d","nodeId","join","nodeType","togglePathNodes","dispatch","type","Select_Path_Noes","payload","getMetaIconGroup","toggleHideFunc","isHide","fill","getIconGroup","drawHeader","drugPredictions","nodeNameDict","headerNames","filter","selected","drug","id","header","name","idx","length","onChangeDrug","getCountWidth","width","drawSummary","metaPathSummary","COUNT_WIDTH","metaPathGroups","triangleRight","triangelBottom","maxCount","Math","max","Object","values","count","flat","rScale","scaleLinear","range","domain","allRows","sort","a","b","hide","summary","nodeTypes","node","nodeIdx","translate","edges","Array","_","edgeIdx","currentY","differentChildren","childrenOffsetY","showChildren","expand","lastMetaPath","undefined","keys","forEach","drugId","metaPathGroup","metaPaths","paths","drugRank","indexOf","children","numOfChildren","drawChildrenPaths","childrenHeight","push","toggleExpandFunc","drawMetaCount","content","selectedDrug","isAdd","selectedDisease","isAttentionLoading","edgeThreshold","vis","drugPrediction","metaPath","find","num","path","every","e","score","prevPath","edgeTypes","filteredMetaPaths","childIdx","nodeName","prevNodeName","prevNodeId","prevNodeType","shortNodeName","includes","cursor","window","open","edge","edgeName","edgeInfo","replace","edgeShortName","setState","filteredMetaGroups","k","render","height","isDrugLoading","isInitializing","svgWidth","matrixRowsCount","sum","reduce","matrixGroupsCount","matrixHeight","svgOuterHeight","svgHeight","reminderText","caseDescription","position","bottom","right","wordWrap"],"mappings":"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","sourcesContent":["import { Tooltip, Modal, Skeleton, Popover, Button } from 'antd';\nimport { cropText, YES_ICON, NO_ICON } from 'helpers';\nimport { getNodeColor } from 'helpers/color';\nimport {\n  ACTION_TYPES,\n  selectDrug,\n  toggleMetaPathHide,\n  toggleMetaPathExpand,\n} from 'stores/actions';\nimport { isAddDrug } from 'stores/reducer';\nimport React from 'react';\n\nimport { StateConsumer } from 'stores';\nimport { IPath, IMetaPathSummary, IState, IDispatch } from 'types';\nimport * as d3 from 'd3';\n\nimport './index.css';\n\ninterface Props {\n  width: number;\n  height: number;\n  globalState: IState;\n  dispatch: IDispatch;\n}\n\ninterface State {\n  isModalVisible: boolean;\n}\n\nclass PathMatrix extends React.Component<Props, State> {\n  TITLE_HEIGHT = 36;\n  MARGIN = 10;\n  PADDING = 10;\n  EDGE_LENGTH = 120;\n  NODE_WIDTH = 130;\n  NODE_HEIGHT = 25;\n  VERTICAL_GAP = 2; // vertical gap between path\n  GROUP_GAP = 6; // vertical gap between path groups\n  COUNT_GAP = 5; // horizontal gap between count circles\n  RADIUS = this.NODE_HEIGHT / 2; // max radius of the count circle\n  HEAD_HEIGHT = 70; // height of the header ()\n  ICON_GAP = 20; // width of the expand triangle icon\n  offsetY = 0; // record the height of the expand meta paths\n\n  constructor(prop: Props) {\n    super(prop);\n    this.state = {\n      isModalVisible: false,\n    };\n\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n    this.filterMetaPathGroups = this.filterMetaPathGroups.bind(this);\n  }\n\n  isPathSelected(nodes: IPath['nodes']) {\n    const { selectedPathNodes } = this.props.globalState;\n    const doesExist =\n      selectedPathNodes.map((d) => d.nodeId).join() ===\n        nodes.map((d) => d.nodeId).join() &&\n      selectedPathNodes.map((d) => d.nodeType).join() ===\n        nodes.map((d) => d.nodeType).join();\n    return doesExist;\n  }\n\n  togglePathNodes(nodes: IPath['nodes'], doesExist: boolean) {\n    if (doesExist) {\n      this.props.dispatch({\n        type: ACTION_TYPES.Select_Path_Noes,\n        payload: { selectedPathNodes: [] },\n      });\n    } else {\n      this.props.dispatch({\n        type: ACTION_TYPES.Select_Path_Noes,\n        payload: { selectedPathNodes: nodes },\n      });\n    }\n  }\n  getMetaIconGroup(toggleHideFunc: () => void, isHide: boolean) {\n    return (\n      <g\n        className=\"feedback\"\n        cursor=\"pointer\"\n        style={{ fill: '#777' }}\n        transform={`translate(5, 0)`}\n      >\n        <g\n          className=\"yes\"\n          transform={`translate(${0 * this.ICON_GAP}, 0)`}\n          onClick={() => toggleHideFunc()}\n        >\n          <rect width={this.ICON_GAP} height={this.ICON_GAP} fill=\"white\" />\n          <path d={isHide ? YES_ICON : NO_ICON} transform={`scale(0.03)`} />\n        </g>\n      </g>\n    );\n  }\n  getIconGroup(nodes: IPath['nodes']) {\n    return (\n      <g className=\"feedback\" cursor=\"pointer\" style={{ fill: '#777' }}>\n        {/* <g\n          className=\"search\"\n          transform={`translate(0, 0)`}\n          fill={doesExist ? 'red' : 'inherit'}\n          onClick={() => this.togglePathNodes(nodes, doesExist)}\n        >\n          <rect\n            width={this.ICON_GAP}\n            height={this.ICON_GAP}\n            fill=\"white\"\n            stroke=\"white\"\n          />\n          <path d={SEARCH_ICON} transform={`scale(0.018)`} />\n        </g> */}\n        {/* <g className=\"yes\" transform={`translate(${this.ICON_GAP}, 0)`}>\n          <rect width={this.ICON_GAP} height={this.ICON_GAP} fill=\"white\" />\n          <path d={YES_ICON} transform={`scale(0.03)`} />\n        </g>\n        <g className=\"no\" transform={`translate(${2 * this.ICON_GAP}, 0)`}>\n          <rect width={this.ICON_GAP} height={this.ICON_GAP} fill=\"white\" />\n          <path d={NO_ICON} transform={`scale(0.03)`} />\n        </g>\n        <g\n          className=\"edit\"\n          transform={`translate(${3 * this.ICON_GAP}, 0)`}\n          onClick={this.showModal}\n        >\n          <rect width={this.ICON_GAP} height={this.ICON_GAP} fill=\"white\" />\n          <path d={EDIT_ICON} transform={`scale(0.03)`} />\n        </g> */}\n      </g>\n    );\n  }\n  drawHeader() {\n    const { drugPredictions, nodeNameDict } = this.props.globalState;\n    const headerNames = drugPredictions\n      .filter((d) => d.selected)\n      .map((drug) => nodeNameDict['drug'][drug.id]);\n    // headerNames.push('SUM');\n\n    const header = headerNames.map((name, idx) => {\n      // const isSelected =\n      //   idx > drugPredictions.length - 1\n      //     ? false\n      //     : drugPredictions[idx].selected;\n      return (\n        <text\n          key={name}\n          className={name}\n          fill={'gray'}\n          cursor=\"pointer\"\n          transform={`translate(\n            ${idx * (this.RADIUS * 2 + this.COUNT_GAP) + this.RADIUS}, \n            ${this.HEAD_HEIGHT}) \n            rotate(-45)`}\n          onClick={() => {\n            if (idx < drugPredictions.length)\n              this.onChangeDrug(drugPredictions[idx].id);\n          }}\n        >\n          {name}\n        </text>\n      );\n    });\n    return header;\n  }\n  getCountWidth() {\n    const width =\n      this.props.globalState.drugPredictions.filter((d) => d.selected).length *\n        (this.RADIUS * 2 + this.COUNT_GAP) +\n      this.COUNT_GAP;\n    return width;\n  }\n  drawSummary() {\n    let { EDGE_LENGTH, NODE_WIDTH, NODE_HEIGHT, VERTICAL_GAP } = this;\n\n    let { metaPathSummary, drugPredictions } = this.props.globalState;\n\n    const COUNT_WIDTH = this.getCountWidth();\n\n    let metaPathGroups = this.filterMetaPathGroups();\n    const triangleRight =\n        'M 9 17.879 V 6.707 A 1 1 0 0 1 10.707 6 l 5.586 5.586 a 1 1 0 0 1 0 1.414 l -5.586 5.586 A 1 1 0 0 1 9 17.879 Z',\n      triangelBottom =\n        'M 6.414 9 h 11.172 a 1 1 0 0 1 0.707 1.707 l -5.586 5.586 a 1 1 0 0 1 -1.414 0 l -5.586 -5.586 A 1 1 0 0 1 6.414 9 Z';\n\n    const maxCount = Math.max(\n      ...metaPathSummary.map((d) => Object.values(d.count)).flat()\n    );\n    const rScale = d3\n      .scaleLinear()\n      .range([this.RADIUS / 3, this.RADIUS])\n      .domain([0, maxCount]);\n\n    this.offsetY = 0;\n    const allRows = [...metaPathSummary]\n      .sort((a, b) => (a.hide ? 1 : 0) - (b.hide ? 1 : 0))\n      .map((summary) => {\n        let nodes = summary.nodeTypes.map((node, nodeIdx) => {\n          let translate = `translate(${\n            (EDGE_LENGTH + NODE_WIDTH) * nodeIdx\n          }, ${0})`;\n          return (\n            <g key={`node_${nodeIdx}`} transform={translate}>\n              <rect\n                width={NODE_WIDTH}\n                height={NODE_HEIGHT}\n                fill=\"white\"\n                strokeWidth=\"3\"\n                stroke={getNodeColor(node)}\n                rx={this.NODE_HEIGHT / 2}\n              />\n              <text\n                textAnchor=\"middle\"\n                y={NODE_HEIGHT / 2 + 6}\n                x={NODE_WIDTH / 2}\n                fill=\"black\"\n              >\n                {node}\n              </text>\n            </g>\n          );\n        });\n        let edges = [...Array(nodes.length - 1)].map((_, edgeIdx) => {\n          let translate = `translate(${\n            NODE_WIDTH + (EDGE_LENGTH + NODE_WIDTH) * edgeIdx\n          }, ${+NODE_HEIGHT / 2})`;\n          return (\n            <g key={`edge_${edgeIdx}`} transform={translate}>\n              <line\n                stroke=\"lightgray\"\n                // strokeWidth={1+Math.random() * 8}\n                strokeWidth={2}\n                x1={0}\n                y1={0}\n                x2={EDGE_LENGTH}\n                y2={0}\n              />\n            </g>\n          );\n        });\n        let currentY = this.offsetY;\n        this.offsetY += NODE_HEIGHT + VERTICAL_GAP;\n\n        let differentChildren: JSX.Element[] = [];\n        let childrenOffsetY = 0;\n        const showChildren = summary.expand;\n\n        let lastMetaPath: IPath | undefined = undefined;\n        Object.keys(metaPathGroups).forEach((drugId) => {\n          const metaPathGroup = metaPathGroups[drugId];\n          const metaPaths =\n            metaPathGroup.filter(\n              (d) => d.nodeTypes.join('') === summary.nodeTypes.join('')\n            )[0]?.paths || [];\n\n          const drugRank = drugPredictions\n            .filter((d) => d.selected)\n            .map((d) => d.id)\n            .indexOf(drugId);\n          const { children, numOfChildren } = this.drawChildrenPaths(\n            metaPaths,\n            drugRank,\n            lastMetaPath\n          );\n          lastMetaPath = metaPaths[metaPaths.length - 1];\n          const childrenHeight = (NODE_HEIGHT + VERTICAL_GAP) * numOfChildren;\n          differentChildren.push(\n            <g\n              key={`drugRank: ${drugRank}`}\n              className={`drugRank_${drugRank}`}\n              transform={`translate(0, ${childrenOffsetY})`}\n            >\n              {children}\n            </g>\n          );\n\n          childrenOffsetY += childrenHeight;\n          if (showChildren) {\n            this.offsetY += childrenHeight;\n          }\n\n          this.offsetY += this.GROUP_GAP;\n        });\n\n        const toggleHideFunc = () => {\n          toggleMetaPathHide(metaPathSummary, summary.idx, this.props.dispatch);\n        };\n\n        const toggleExpandFunc = () => {\n          toggleMetaPathExpand(\n            metaPathSummary,\n            summary.idx,\n            this.props.dispatch\n          );\n        };\n\n        return (\n          <g\n            key={`prototype_${summary.idx}`}\n            transform={`translate(${0}, ${currentY})`}\n            opacity={summary.hide ? 0.4 : 1}\n          >\n            <g className=\"metaCount\">{this.drawMetaCount(summary, rScale)}</g>\n            <g className=\"icon\">\n              <path\n                d={showChildren ? triangelBottom : triangleRight}\n                transform={`translate(${COUNT_WIDTH}, 0)`}\n                fill=\"gray\"\n                onClick={toggleExpandFunc}\n                cursor=\"pointer\"\n              />\n            </g>\n            <g\n              className=\"prototype\"\n              transform={`translate(${COUNT_WIDTH + this.ICON_GAP}, 0)`}\n            >\n              {nodes}\n              {edges}\n              <g\n                className=\"iconGroup\"\n                transform={`translate(${\n                  NODE_WIDTH * nodes.length + EDGE_LENGTH * edges.length\n                }, 0)`}\n              >\n                {this.getMetaIconGroup(toggleHideFunc, summary.hide)}\n              </g>\n            </g>\n            <g className=\"metapaths\">\n              {showChildren ? differentChildren : <g />}\n            </g>\n          </g>\n        );\n      });\n    const header = this.drawHeader();\n    const content = (\n      <g>\n        <g\n          className=\"header\"\n          transform={`translate(${this.PADDING}, ${this.PADDING})`}\n        >\n          {header}\n        </g>\n        <g\n          className=\"rows\"\n          transform={`translate(${0}, ${this.PADDING + this.HEAD_HEIGHT})`}\n        >\n          {allRows}\n        </g>\n      </g>\n    );\n    return content;\n  }\n\n  onChangeDrug(selectedDrug: string) {\n    const isAdd = isAddDrug(\n      this.props.globalState.drugPredictions,\n      selectedDrug\n    );\n    selectDrug(\n      selectedDrug,\n      this.props.globalState.selectedDisease,\n      isAdd,\n      this.props.dispatch\n    );\n  }\n\n  // componentDidUpdate(prevProps: Props) {\n  //   // if (\n  //   //   // when disease changed, collapse all meta paths\n  //   //   prevProps.globalState.selectedDisease !==\n  //   //   this.props.globalState.selectedDisease\n  //   // ) {\n  //   //   this.setState({\n  //   //     expand: this.props.globalState.metaPathSummary.map((d) => false),\n  //   //   });\n  //   // } else\n\n  //   if (\n  //     prevProps.globalState.drugPredictions.filter((d) => d.selected).length !==\n  //     this.props.globalState.drugPredictions.filter((d) => d.selected).length\n  //   ) {\n  //     // update expended metapaths when selected drug changes\n  //     const { metaPathSummary } = this.props.globalState;\n\n  //     // const expandStatus = metaPathSummary.map(\n  //     //   (d) =>\n  //     //     Object.values(d.count).reduce(\n  //     //       (acc, cur, i) => acc + cur * (drugPredictions[i].selected ? 1 : 0),\n  //     //       0\n  //     //     ) > 0 && !d.hide\n  //     // );\n\n  //   }\n  // }\n\n  drawMetaCount(\n    summary: IMetaPathSummary,\n    rScale: d3.ScaleLinear<number, number>\n  ) {\n    const {\n      drugPredictions,\n      isAttentionLoading,\n      metaPathGroups,\n      edgeThreshold,\n    } = this.props.globalState;\n    const { count, nodeTypes } = summary;\n    const vis = drugPredictions\n      .filter((d) => d.selected)\n      .map((drugPrediction, idx) => {\n        const { id: drugId } = drugPrediction;\n        // const num = count[drugId]\n        //   ? count[drugId]\n        //   : isAttentionLoading\n        //   ? '...'\n        //   : 0;\n\n        const metaPath = metaPathGroups[drugId]?.find(\n          (d) => d.nodeTypes.join(',') === nodeTypes.join(',')\n        );\n        const num = metaPath\n          ? metaPath.paths.filter((path) =>\n              path.edges.every((e) => e.score >= edgeThreshold)\n            ).length\n          : isAttentionLoading\n          ? '...'\n          : 0;\n\n        const content = (\n          <text\n            textAnchor=\"middle\"\n            transform={`translate(${this.RADIUS}, ${this.RADIUS / 2})`}\n            fontSize={15}\n            fill={'gray'}\n          >\n            {num}\n          </text>\n        );\n        return (\n          <g\n            key={idx}\n            className=\"count\"\n            transform={`translate(${\n              idx * (2 * this.RADIUS + this.COUNT_GAP)\n            }, ${this.NODE_HEIGHT / 2})`}\n            cursor=\"pointer\"\n            onClick={() => this.onChangeDrug(drugId)}\n          >\n            {content}\n          </g>\n        );\n      });\n    return (\n      <g className=\"metaCount\" transform={`translate(${this.PADDING}, 0)`}>\n        {vis}\n        {/* <g\n          className=\"sum\"\n          transform={`translate(${\n            count.length * (2 * this.RADIUS + this.COUNT_GAP)\n          }, 0)`}\n        >\n          <text\n            x={this.RADIUS}\n            y={this.NODE_HEIGHT / 2 + 6}\n            textAnchor=\"middle\"\n          >\n            {' '}\n            {`${sum}`}{' '}\n          </text>\n        </g> */}\n      </g>\n    );\n  }\n\n  drawChildrenPaths(\n    metaPaths: IPath[],\n    drugRank: number,\n    prevPath: IPath | undefined\n  ) {\n    const { nodeNameDict, edgeTypes, edgeThreshold } = this.props.globalState;\n    const COUNT_WIDTH = this.getCountWidth();\n    const filteredMetaPaths = metaPaths.filter((metaPath) =>\n      metaPath.edges.every((e) => e.score >= edgeThreshold)\n    );\n    const children = filteredMetaPaths.map((metaPath, childIdx) => {\n      const nodes = metaPath.nodes.map((node, nodeIdx) => {\n        const { nodeId, nodeType } = node;\n        const nodeName = nodeNameDict[nodeType][nodeId];\n\n        let prevNodeName = '';\n        if (childIdx > 0) {\n          prevPath = metaPaths[childIdx - 1];\n        }\n        if (prevPath !== undefined) {\n          const { nodeId: prevNodeId, nodeType: prevNodeType } = prevPath.nodes[\n            nodeIdx\n          ];\n          prevNodeName = nodeNameDict[prevNodeType][prevNodeId];\n        }\n\n        let shortNodeName =\n          nodeName === prevNodeName\n            ? '〃'\n            : cropText(nodeName, 14, this.NODE_WIDTH - 10) || 'undefined';\n\n        let translate = `translate(${\n          (this.EDGE_LENGTH + this.NODE_WIDTH) * nodeIdx\n        }, ${0})`;\n\n        return (\n          <Tooltip\n            key={`node_${nodeIdx}`}\n            title={shortNodeName.includes('.') ? nodeName : ''}\n          >\n            <g\n              transform={translate}\n              className={`node_${nodeId}`}\n              style={{ cursor: 'pointer' }}\n              onClick={() =>\n                nodeType === 'drug' &&\n                window.open(\n                  `https://go.drugbank.com/drugs/${nodeId}`,\n                  'windowName',\n                  'popup,right=10,top=10,width=320,height=600'\n                )\n              }\n            >\n              <rect\n                width={this.NODE_WIDTH}\n                height={this.NODE_HEIGHT}\n                fill={getNodeColor(nodeType)}\n              />\n              <text\n                textAnchor=\"middle\"\n                y={this.NODE_HEIGHT / 2 + 6}\n                x={this.NODE_WIDTH / 2}\n                fill=\"white\"\n              >\n                {shortNodeName}\n              </text>\n            </g>\n          </Tooltip>\n        );\n      });\n      const edges = metaPath.edges.map((edge, edgeIdx) => {\n        const translate = `translate(${\n          this.NODE_WIDTH + (this.EDGE_LENGTH + this.NODE_WIDTH) * edgeIdx\n        }, ${+this.NODE_HEIGHT / 2})`;\n\n        let edgeName = edge.edgeInfo.replace('rev_', '');\n        edgeName = edgeTypes[edgeName]?.edgeInfo || edgeName;\n        const edgeShortName = cropText(edgeName, 14, this.EDGE_LENGTH);\n        return (\n          <Tooltip\n            title={edgeShortName === edgeName ? '' : edgeName}\n            destroyTooltipOnHide\n          >\n            <g\n              key={`edge_${edgeIdx}`}\n              transform={translate}\n              style={{ cursor: 'pointer' }}\n            >\n              <line\n                stroke=\"gray\"\n                strokeWidth={1 + edge.score * 0.7}\n                x1={0}\n                y1={this.NODE_HEIGHT / 4}\n                x2={this.EDGE_LENGTH}\n                y2={this.NODE_HEIGHT / 4}\n              />\n              <text\n                x={this.EDGE_LENGTH / 2}\n                y={0}\n                textAnchor=\"middle\"\n                fill=\"gray\"\n              >\n                {edgeShortName}\n              </text>\n            </g>\n          </Tooltip>\n        );\n      });\n      return (\n        <g\n          key={childIdx}\n          transform={`translate(0, ${\n            (this.NODE_HEIGHT + this.VERTICAL_GAP) * (1 + childIdx)\n          })`}\n        >\n          <circle\n            cx={\n              drugRank * (2 * this.RADIUS + this.COUNT_GAP) +\n              this.RADIUS +\n              this.PADDING\n            }\n            cy={this.NODE_HEIGHT / 2}\n            fill=\"gray\"\n            r={this.RADIUS / 4}\n          />\n          <g transform={`translate(${COUNT_WIDTH + this.ICON_GAP}, 0)`}>\n            {nodes}\n            {edges}\n            <g\n              className=\"iconGroup\"\n              transform={`translate(${\n                this.NODE_WIDTH * nodes.length + this.EDGE_LENGTH * edges.length\n              }, 0)`}\n            >\n              {this.getIconGroup(metaPath.nodes)}\n            </g>\n          </g>\n        </g>\n      );\n    });\n    return { children, numOfChildren: filteredMetaPaths.length };\n  }\n  showModal() {\n    this.setState({ isModalVisible: true });\n  }\n  hideModal() {\n    this.setState({ isModalVisible: false });\n  }\n  filterMetaPathGroups() {\n    let { metaPathGroups, edgeThreshold } = this.props.globalState;\n    let filteredMetaGroups: IState['metaPathGroups'] = {};\n    Object.keys(metaPathGroups).forEach((k) => {\n      filteredMetaGroups[k] = metaPathGroups[k].map((metaPathGroup) => {\n        const metaPaths = metaPathGroup.paths.filter((path) =>\n          path.edges.every((e) => e.score > edgeThreshold)\n        );\n        return { ...metaPathGroup, metaPaths };\n      });\n    });\n\n    Object.keys(filteredMetaGroups).forEach((k) => {\n      filteredMetaGroups[k] = filteredMetaGroups[k].filter(\n        (metaPathGroup) => metaPathGroup.paths.length > 0\n      );\n    });\n\n    return filteredMetaGroups;\n  }\n  render() {\n    const { width, height } = this.props,\n      { isModalVisible } = this.state;\n    const {\n      isDrugLoading,\n      isInitializing,\n      isAttentionLoading,\n      metaPathSummary,\n      selectedDisease,\n      drugPredictions,\n    } = this.props.globalState;\n\n    const svgWidth = Math.max(\n      width - 2 * this.PADDING - 2 * this.MARGIN,\n      this.getCountWidth() +\n        this.ICON_GAP * 5 +\n        this.NODE_WIDTH +\n        (this.EDGE_LENGTH + this.NODE_WIDTH) * 4\n    );\n\n    const matrixRowsCount = Object.values(metaPathSummary)\n        .map((d, idx) => {\n          return d['expand'] ? d.sum : 0;\n        })\n        .reduce((a, b) => a + b, 0),\n      matrixGroupsCount = Object.keys(metaPathSummary).length,\n      matrixHeight =\n        matrixRowsCount * (this.NODE_HEIGHT + this.VERTICAL_GAP) +\n        this.PADDING +\n        matrixGroupsCount * (this.HEAD_HEIGHT + this.GROUP_GAP);\n\n    const svgOuterHeight = height - this.TITLE_HEIGHT,\n      svgHeight = Math.max(matrixHeight + this.HEAD_HEIGHT, svgOuterHeight);\n\n    const reminderText = (\n      <text\n        x={width / 2}\n        y={height / 2}\n        fill=\"gray\"\n        textAnchor=\"middle\"\n        fontSize={20}\n      >\n        {isAttentionLoading\n          ? ''\n          : typeof selectedDisease == 'string' &&\n            drugPredictions.filter((d) => d.selected).length > 0\n          ? 'Sorry, we find no meta path with current computational resources.'\n          : 'Please select a disease and at least one drug'}\n      </text>\n    );\n\n    const metaPaths = this.drawSummary();\n    const content = metaPathSummary.length === 0 ? reminderText : metaPaths;\n    if (isInitializing) {\n      return <Skeleton active />;\n    }\n\n    const { caseDescription } = this.props.globalState;\n    return (\n      <>\n        {caseDescription && (\n          <div\n            className=\"caseReadmore\"\n            style={{\n              position: 'fixed',\n              bottom: height,\n              right: '20px',\n            }}\n          >\n            <Popover\n              content={\n                <div style={{ wordWrap: 'break-word' }}>\n                  {this.props.globalState.caseDescription}\n                </div>\n              }\n              placement=\"topLeft\"\n              overlayStyle={{\n                width: '60vw',\n                right: '20vw',\n              }}\n              trigger=\"click\"\n            >\n              <Button type=\"primary\">Read more about this case</Button>\n            </Popover>\n          </div>\n        )}\n\n        <svg width={svgWidth} height={svgHeight}>\n          {content}\n        </svg>\n\n        <Modal\n          title=\"Edit Explanation\"\n          visible={isModalVisible}\n          onOk={this.hideModal}\n          onCancel={this.hideModal}\n          okText=\"Confirm\"\n          width={width}\n          zIndex={1999}\n        >\n          <svg width={width}></svg>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default StateConsumer(PathMatrix);\n"]},"metadata":{},"sourceType":"module"}