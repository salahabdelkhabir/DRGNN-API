{"ast":null,"code":"import * as selection from 'd3-selection';\nimport * as drag from 'd3-drag';\nimport classifyPoint from 'robust-point-in-polygon';\nexport default function () {\n  var items = [],\n      closePathDistance = 75,\n      closePathSelect = true,\n      isPathClosed = false,\n      hoverSelect = true,\n      targetArea,\n      on = {\n    start: function () {},\n    draw: function () {},\n    end: function () {}\n  }; // Function to execute on call\n\n  function lasso(_this) {\n    // add a new group for the lasso\n    var g = _this.append('g').attr('class', 'lasso'); // add the drawn path for the lasso\n\n\n    var dyn_path = g.append('path').attr('class', 'drawn'); // add a closed path\n\n    var close_path = g.append('path').attr('class', 'loop_close'); // add an origin node\n\n    var origin_node = g.append('circle').attr('class', 'origin'); // The transformed lasso path for rendering\n\n    var tpath; // The lasso origin for calculations\n\n    var origin; // The transformed lasso origin for rendering\n\n    var torigin; // Store off coordinates drawn\n\n    var drawnCoords; // Apply drag behaviors\n\n    var dragAction = drag.drag().on('start', dragstart).on('drag', dragmove).on('end', dragend); // Call drag\n\n    targetArea.call(dragAction);\n\n    function dragstart() {\n      // Init coordinates\n      drawnCoords = []; // Initialize paths\n\n      tpath = '';\n      dyn_path.attr('d', null);\n      close_path.attr('d', null); // Set every item to have a false selection and reset their center point and counters\n\n      items.nodes().forEach(function (e) {\n        e.__lasso.possible = false;\n        e.__lasso.selected = false;\n        e.__lasso.hoverSelect = false;\n        e.__lasso.loopSelect = false;\n        var box = e.getBoundingClientRect();\n        e.__lasso.lassoPoint = [Math.round(box.left + box.width / 2), Math.round(box.top + box.height / 2)];\n      }); // if hover is on, add hover function\n\n      if (hoverSelect) {\n        items.on('mouseover.lasso', function () {\n          // if hovered, change lasso selection attribute to true\n          this.__lasso.hoverSelect = true;\n        });\n      } // Run user defined start function\n\n\n      on.start();\n    }\n\n    function dragmove() {\n      // Get mouse position within body, used for calculations\n      var x, y;\n\n      if (selection.event.sourceEvent.type === 'touchmove') {\n        x = selection.event.sourceEvent.touches[0].clientX;\n        y = selection.event.sourceEvent.touches[0].clientY;\n      } else {\n        x = selection.event.sourceEvent.clientX;\n        y = selection.event.sourceEvent.clientY;\n      } // Get mouse position within drawing area, used for rendering\n\n\n      var tx = selection.mouse(this)[0];\n      var ty = selection.mouse(this)[1]; // Initialize the path or add the latest point to it\n\n      if (tpath === '') {\n        tpath = tpath + 'M ' + tx + ' ' + ty;\n        origin = [x, y];\n        torigin = [tx, ty]; // Draw origin node\n\n        origin_node.attr('cx', tx).attr('cy', ty).attr('r', 7).attr('display', null);\n      } else {\n        tpath = tpath + ' L ' + tx + ' ' + ty;\n      }\n\n      drawnCoords.push([x, y]); // Calculate the current distance from the lasso origin\n\n      var distance = Math.sqrt(Math.pow(x - origin[0], 2) + Math.pow(y - origin[1], 2)); // Set the closed path line\n\n      var close_draw_path = 'M ' + tx + ' ' + ty + ' L ' + torigin[0] + ' ' + torigin[1]; // Draw the lines\n\n      dyn_path.attr('d', tpath);\n      close_path.attr('d', close_draw_path); // Check if the path is closed\n\n      isPathClosed = distance <= closePathDistance ? true : false; // If within the closed path distance parameter, show the closed path. otherwise, hide it\n\n      if (isPathClosed && closePathSelect) {\n        close_path.attr('display', null);\n      } else {\n        close_path.attr('display', 'none');\n      }\n\n      items.nodes().forEach(function (n) {\n        n.__lasso.loopSelect = isPathClosed && closePathSelect && n.__lasso.lassoPoint ? classifyPoint(drawnCoords, n.__lasso.lassoPoint) < 1 : false;\n        n.__lasso.possible = n.__lasso.hoverSelect || n.__lasso.loopSelect;\n      });\n      on.draw();\n    }\n\n    function dragend() {\n      // Remove mouseover tagging function\n      items.on('mouseover.lasso', null);\n      items.nodes().forEach(function (n) {\n        n.__lasso.selected = n.__lasso.possible;\n        n.__lasso.possible = false;\n      }); // Clear lasso\n\n      dyn_path.attr('d', null);\n      close_path.attr('d', null);\n      origin_node.attr('display', 'none'); // Run user defined end function\n\n      on.end();\n    }\n  } // Set or get list of items for lasso to select\n\n\n  lasso.items = function (_) {\n    if (!arguments.length) return items;\n    items = _;\n    var nodes = items.nodes();\n    nodes.forEach(function (n) {\n      n.__lasso = {\n        possible: false,\n        selected: false\n      };\n    });\n    return lasso;\n  }; // Return possible items\n\n\n  lasso.possibleItems = function () {\n    return items.filter(function () {\n      return this.__lasso.possible;\n    });\n  }; // Return selected items\n\n\n  lasso.selectedItems = function () {\n    return items.filter(function () {\n      return this.__lasso.selected;\n    });\n  }; // Return not possible items\n\n\n  lasso.notPossibleItems = function () {\n    return items.filter(function () {\n      return !this.__lasso.possible;\n    });\n  }; // Return not selected items\n\n\n  lasso.notSelectedItems = function () {\n    return items.filter(function () {\n      return !this.__lasso.selected;\n    });\n  }; // Distance required before path auto closes loop\n\n\n  lasso.closePathDistance = function (_) {\n    if (!arguments.length) return closePathDistance;\n    closePathDistance = _;\n    return lasso;\n  }; // Option to loop select or not\n\n\n  lasso.closePathSelect = function (_) {\n    if (!arguments.length) return closePathSelect;\n    closePathSelect = _ === true ? true : false;\n    return lasso;\n  }; // Not sure what this is for\n\n\n  lasso.isPathClosed = function (_) {\n    if (!arguments.length) return isPathClosed;\n    isPathClosed = _ === true ? true : false;\n    return lasso;\n  }; // Option to select on hover or not\n\n\n  lasso.hoverSelect = function (_) {\n    if (!arguments.length) return hoverSelect;\n    hoverSelect = _ === true ? true : false;\n    return lasso;\n  }; // Events\n\n\n  lasso.on = function (type, _) {\n    if (!arguments.length) return on;\n    if (arguments.length === 1) return on[type];\n    var types = ['start', 'draw', 'end'];\n\n    if (types.indexOf(type) > -1) {\n      on[type] = _;\n    }\n\n    return lasso;\n  }; // Area where lasso can be triggered from\n\n\n  lasso.targetArea = function (_) {\n    if (!arguments.length) return targetArea;\n    targetArea = _;\n    return lasso;\n  };\n\n  return lasso;\n}","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/components/CardContainer/lasso.js"],"names":["selection","drag","classifyPoint","items","closePathDistance","closePathSelect","isPathClosed","hoverSelect","targetArea","on","start","draw","end","lasso","_this","g","append","attr","dyn_path","close_path","origin_node","tpath","origin","torigin","drawnCoords","dragAction","dragstart","dragmove","dragend","call","nodes","forEach","e","__lasso","possible","selected","loopSelect","box","getBoundingClientRect","lassoPoint","Math","round","left","width","top","height","x","y","event","sourceEvent","type","touches","clientX","clientY","tx","mouse","ty","push","distance","sqrt","pow","close_draw_path","n","_","arguments","length","possibleItems","filter","selectedItems","notPossibleItems","notSelectedItems","types","indexOf"],"mappings":"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","sourcesContent":["import * as selection from 'd3-selection';\nimport * as drag from 'd3-drag';\nimport classifyPoint from 'robust-point-in-polygon';\n\nexport default function () {\n  var items = [],\n    closePathDistance = 75,\n    closePathSelect = true,\n    isPathClosed = false,\n    hoverSelect = true,\n    targetArea,\n    on = { start: function () {}, draw: function () {}, end: function () {} };\n\n  // Function to execute on call\n  function lasso(_this) {\n    // add a new group for the lasso\n    var g = _this.append('g').attr('class', 'lasso');\n\n    // add the drawn path for the lasso\n    var dyn_path = g.append('path').attr('class', 'drawn');\n\n    // add a closed path\n    var close_path = g.append('path').attr('class', 'loop_close');\n\n    // add an origin node\n    var origin_node = g.append('circle').attr('class', 'origin');\n\n    // The transformed lasso path for rendering\n    var tpath;\n\n    // The lasso origin for calculations\n    var origin;\n\n    // The transformed lasso origin for rendering\n    var torigin;\n\n    // Store off coordinates drawn\n    var drawnCoords;\n\n    // Apply drag behaviors\n    var dragAction = drag\n      .drag()\n      .on('start', dragstart)\n      .on('drag', dragmove)\n      .on('end', dragend);\n\n    // Call drag\n    targetArea.call(dragAction);\n\n    function dragstart() {\n      // Init coordinates\n      drawnCoords = [];\n\n      // Initialize paths\n      tpath = '';\n      dyn_path.attr('d', null);\n      close_path.attr('d', null);\n\n      // Set every item to have a false selection and reset their center point and counters\n      items.nodes().forEach(function (e) {\n        e.__lasso.possible = false;\n        e.__lasso.selected = false;\n        e.__lasso.hoverSelect = false;\n        e.__lasso.loopSelect = false;\n\n        var box = e.getBoundingClientRect();\n        e.__lasso.lassoPoint = [\n          Math.round(box.left + box.width / 2),\n          Math.round(box.top + box.height / 2),\n        ];\n      });\n\n      // if hover is on, add hover function\n      if (hoverSelect) {\n        items.on('mouseover.lasso', function () {\n          // if hovered, change lasso selection attribute to true\n          this.__lasso.hoverSelect = true;\n        });\n      }\n\n      // Run user defined start function\n      on.start();\n    }\n\n    function dragmove() {\n      // Get mouse position within body, used for calculations\n      var x, y;\n      if (selection.event.sourceEvent.type === 'touchmove') {\n        x = selection.event.sourceEvent.touches[0].clientX;\n        y = selection.event.sourceEvent.touches[0].clientY;\n      } else {\n        x = selection.event.sourceEvent.clientX;\n        y = selection.event.sourceEvent.clientY;\n      }\n\n      // Get mouse position within drawing area, used for rendering\n      var tx = selection.mouse(this)[0];\n      var ty = selection.mouse(this)[1];\n\n      // Initialize the path or add the latest point to it\n      if (tpath === '') {\n        tpath = tpath + 'M ' + tx + ' ' + ty;\n        origin = [x, y];\n        torigin = [tx, ty];\n        // Draw origin node\n        origin_node\n          .attr('cx', tx)\n          .attr('cy', ty)\n          .attr('r', 7)\n          .attr('display', null);\n      } else {\n        tpath = tpath + ' L ' + tx + ' ' + ty;\n      }\n\n      drawnCoords.push([x, y]);\n\n      // Calculate the current distance from the lasso origin\n      var distance = Math.sqrt(\n        Math.pow(x - origin[0], 2) + Math.pow(y - origin[1], 2)\n      );\n\n      // Set the closed path line\n      var close_draw_path =\n        'M ' + tx + ' ' + ty + ' L ' + torigin[0] + ' ' + torigin[1];\n\n      // Draw the lines\n      dyn_path.attr('d', tpath);\n\n      close_path.attr('d', close_draw_path);\n\n      // Check if the path is closed\n      isPathClosed = distance <= closePathDistance ? true : false;\n\n      // If within the closed path distance parameter, show the closed path. otherwise, hide it\n      if (isPathClosed && closePathSelect) {\n        close_path.attr('display', null);\n      } else {\n        close_path.attr('display', 'none');\n      }\n\n      items.nodes().forEach(function (n) {\n        n.__lasso.loopSelect =\n          isPathClosed && closePathSelect && n.__lasso.lassoPoint\n            ? classifyPoint(drawnCoords, n.__lasso.lassoPoint) < 1\n            : false;\n        n.__lasso.possible = n.__lasso.hoverSelect || n.__lasso.loopSelect;\n      });\n\n      on.draw();\n    }\n\n    function dragend() {\n      // Remove mouseover tagging function\n      items.on('mouseover.lasso', null);\n\n      items.nodes().forEach(function (n) {\n        n.__lasso.selected = n.__lasso.possible;\n        n.__lasso.possible = false;\n      });\n\n      // Clear lasso\n      dyn_path.attr('d', null);\n      close_path.attr('d', null);\n      origin_node.attr('display', 'none');\n\n      // Run user defined end function\n      on.end();\n    }\n  }\n\n  // Set or get list of items for lasso to select\n  lasso.items = function (_) {\n    if (!arguments.length) return items;\n    items = _;\n    var nodes = items.nodes();\n    nodes.forEach(function (n) {\n      n.__lasso = {\n        possible: false,\n        selected: false,\n      };\n    });\n    return lasso;\n  };\n\n  // Return possible items\n  lasso.possibleItems = function () {\n    return items.filter(function () {\n      return this.__lasso.possible;\n    });\n  };\n\n  // Return selected items\n  lasso.selectedItems = function () {\n    return items.filter(function () {\n      return this.__lasso.selected;\n    });\n  };\n\n  // Return not possible items\n  lasso.notPossibleItems = function () {\n    return items.filter(function () {\n      return !this.__lasso.possible;\n    });\n  };\n\n  // Return not selected items\n  lasso.notSelectedItems = function () {\n    return items.filter(function () {\n      return !this.__lasso.selected;\n    });\n  };\n\n  // Distance required before path auto closes loop\n  lasso.closePathDistance = function (_) {\n    if (!arguments.length) return closePathDistance;\n    closePathDistance = _;\n    return lasso;\n  };\n\n  // Option to loop select or not\n  lasso.closePathSelect = function (_) {\n    if (!arguments.length) return closePathSelect;\n    closePathSelect = _ === true ? true : false;\n    return lasso;\n  };\n\n  // Not sure what this is for\n  lasso.isPathClosed = function (_) {\n    if (!arguments.length) return isPathClosed;\n    isPathClosed = _ === true ? true : false;\n    return lasso;\n  };\n\n  // Option to select on hover or not\n  lasso.hoverSelect = function (_) {\n    if (!arguments.length) return hoverSelect;\n    hoverSelect = _ === true ? true : false;\n    return lasso;\n  };\n\n  // Events\n  lasso.on = function (type, _) {\n    if (!arguments.length) return on;\n    if (arguments.length === 1) return on[type];\n    var types = ['start', 'draw', 'end'];\n    if (types.indexOf(type) > -1) {\n      on[type] = _;\n    }\n    return lasso;\n  };\n\n  // Area where lasso can be triggered from\n  lasso.targetArea = function (_) {\n    if (!arguments.length) return targetArea;\n    targetArea = _;\n    return lasso;\n  };\n\n  return lasso;\n}\n"]},"metadata":{},"sourceType":"module"}