{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Explorer_V2\\\\src\\\\components\\\\TabContainer\\\\Graph.tsx\";\nimport * as React from 'react';\nimport * as d3 from 'd3';\nimport { flatTree, getNodeColor, pruneEdge, LOADING_ICON } from 'helpers';\nexport default class ModelNodeForce extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.padding = 20;\n    this.RADIUS = 8;\n    this.prevNodes = [];\n    this.prevLinks = [];\n    this.simulation = d3.forceSimulation().force('charge', d3.forceManyBody().strength(-170)).force('link', d3.forceLink().id(d => d.id).distance(6).strength(0.6)).force('collision', d3.forceCollide().radius(this.RADIUS + 2)).alphaMin(0.05);\n  }\n\n  // force quick simulation\n  ticked(svgNodes, svgLinks) {\n    svgNodes.attr('transform', d => `translate(${d.x}, ${d.y})`);\n    svgLinks.select('line.link').attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n    svgLinks.select('line.mask').attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n    svgLinks.select('text').attr('text-anchor', 'middle').attr('transform', d => `translate(${(d.target.x + d.source.x) / 2}, ${(d.source.y + d.target.y) / 2})`);\n  }\n\n  dragstarted(d) {\n    if (!d3.event.active) this.simulation.alpha(0.3).restart();\n    d.fx = d.x;\n    d.fy = d.y;\n  }\n\n  dragged(d) {\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  }\n\n  dragended(d) {\n    if (!d3.event.active) this.simulation.alpha(0);\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  }\n\n  isTargetNode(d) {\n    const {\n      drugPredictions,\n      selectedDisease\n    } = this.props.globalState;\n    const selectedDrugs = drugPredictions.filter(d => d.selected).map(d => d.id);\n    return selectedDrugs.includes(d.nodeId) || selectedDisease === d.nodeId;\n  }\n\n  isHighlighted(d) {\n    const {\n      selectedPathNodes\n    } = this.props.globalState;\n    return selectedPathNodes.map(i => i.nodeType).includes(d.nodeType) && selectedPathNodes.map(i => i.nodeId).includes(d.nodeId);\n  }\n\n  getNodeLinks() {\n    const {\n      drugPredictions,\n      attention,\n      // edgeThreshold,\n      selectedDisease,\n      edgeTypes\n    } = this.props.globalState;\n    const {\n      width,\n      height\n    } = this.props;\n    const selectedDrugs = drugPredictions.filter(d => d.selected).map(d => d.id);\n    let nodes = [],\n        links = [];\n    Object.values(attention).forEach(nodeAttention => {\n      // let nodeAttentionFiltered = pruneEdge(nodeAttention, edgeThreshold);\n      const rootNode = d3.hierarchy(nodeAttention);\n      let desNodes = [];\n      rootNode.descendants().forEach(d => {\n        const node = {\n          id: `${d.data.nodeType}:${d.data.nodeId}`,\n          nodeId: d.data.nodeId,\n          nodeType: d.data.nodeType\n        };\n        const prevNode = this.prevNodes.find(d => d.id === node.id);\n        desNodes.push({ ...node,\n          ...prevNode\n        });\n      });\n      nodes = nodes.concat(desNodes);\n      const desLinks = rootNode.links().map(d => {\n        var _edgeTypes$edgeInfo;\n\n        const sourceData = d.source.data,\n              targetData = d.target.data;\n        let edgeInfo = targetData.edgeInfo.replace('rev_', '');\n        edgeInfo = ((_edgeTypes$edgeInfo = edgeTypes[edgeInfo]) === null || _edgeTypes$edgeInfo === void 0 ? void 0 : _edgeTypes$edgeInfo.edgeInfo) || edgeInfo;\n        return {\n          source: `${sourceData.nodeType}:${sourceData.nodeId}`,\n          target: `${targetData.nodeType}:${targetData.nodeId}`,\n          score: targetData.score,\n          edgeInfo\n        };\n      });\n      links = links.concat(desLinks);\n    }); // // show the virus host proteins\n    // let nodes:INode[] =  viralTargets.map(d => { return { id: d.toString() } }),\n    //     links:ILink[] = targetLinks.map(edge => { return { source: edge[0].toString(), target: edge[1].toString() } })\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      const drugIdx = selectedDrugs.indexOf(node.nodeId);\n\n      if (node.nodeId === selectedDisease) {\n        node.fy = height / 2;\n        node.fx = width * 0.2;\n      } else if (drugIdx > -1) {\n        node.fy = height / (selectedDrugs.length + 1) * (drugIdx + 1);\n        node.fx = width * 0.8;\n      }\n    }\n\n    this.prevNodes = nodes;\n    this.prevLinks = links;\n    return {\n      nodes,\n      links\n    };\n  }\n\n  drawGraph() {\n    const {\n      nodeNameDict\n    } = this.props.globalState;\n    const {\n      nodes,\n      links\n    } = this.getNodeLinks();\n    const {\n      width,\n      height\n    } = this.props;\n    const widthScale = d3.scaleLinear().range([1, 4]).domain(d3.extent(links.map(d => d.score)));\n    let svgLinks = d3.select('svg.graph').select('g.links').selectAll('g.link').data(links).join(enter => enter.append('g').attr('class', 'link')).on('mouseover', function () {\n      d3.select(this).select('text.edgeLabel').transition().delay(500).attr('class', 'edgeLabel');\n    }).on('mouseout', function () {\n      d3.select(this).select('text.edgeLabel').transition().delay(500).attr('class', 'edgeLabel hidden');\n    });\n    svgLinks.append('line').attr('x1', d => d.target.x).attr('y1', d => d.target.y).attr('x2', d => d.source.x).attr('y2', d => d.source.y).attr('class', 'link').attr('stroke', '#aaa').attr('stroke-width', d => widthScale(d.score)).attr('id', d => d.id);\n    svgLinks.append('line').attr('x1', d => d.target.x).attr('y1', d => d.target.y).attr('x2', d => d.source.x).attr('y2', d => d.source.y).attr('class', 'mask').attr('stroke-width', 4).attr('stroke', 'transparent');\n    svgLinks.append('text').attr('class', 'edgeLabel hidden').attr('transform', d => `translate(${(d.target.x + d.source.x) / 2}, ${(d.source.y + d.target.y) / 2})`).text(d => d.edgeInfo);\n    let svgNodes = d3.select('svg.graph').select('g.nodes').selectAll('g.nodeGroup').data(nodes, d => d.id).join(enter => enter.append('g').attr('class', 'nodeGroup').attr('transform', d => {\n      return `translate(${d.x || width / 2}, ${d.y || height / 2})`;\n    }) // ensure d.x is not undefined when first entering\n    .attr('cursor', 'pointer').call(d3.drag().on('start', this.dragstarted.bind(this)).on('drag', this.dragged.bind(this)).on('end', this.dragended.bind(this))), update => update.attr('transform', d => `translate(${d.x}, ${d.y})`), exit => exit.remove());\n    svgNodes.append('circle') // .filter(d=>!drugTargets.includes(d.id))\n    .attr('r', this.RADIUS) // .attr(\"r\", 5)\n    .attr('class', 'node').attr('id', d => d.id).attr('fill', d => getNodeColor(d.nodeType)).attr('stroke', 'white'); // add label to all nodes\n\n    svgNodes.append('text').attr('class', 'nodeLabel').attr('transform', `translate(${-1 * this.RADIUS}, ${-2 * this.RADIUS} )`).text(d => nodeNameDict[d.nodeType][d.nodeId]).classed('hidden', true);\n    svgNodes.filter(d => this.isTargetNode(d) || this.isHighlighted(d)).select('text.nodeLabel').classed('hidden', false); // toggle node visibility through click\n\n    svgNodes.on('click', function (d) {\n      const textlabel = d3.select(this).select('text.nodeLabel');\n      const isHidden = textlabel.classed('hidden');\n      textlabel.classed('hidden', !isHidden);\n    });\n    this.simulation.nodes(nodes);\n    this.simulation.force('link').links(links);\n    this.simulation.on('tick', () => this.ticked(svgNodes, svgLinks));\n    this.updateVisibility();\n  }\n\n  updateNodeLabel() {\n    let svgNodes = d3.select('svg.graph').select('g.nodes').selectAll('g.nodeGroup');\n    svgNodes.filter(d => this.isTargetNode(d) || this.isHighlighted(d)).select('text.nodeLabel').classed('hidden', false);\n  }\n\n  updateVisibility() {\n    // update visibility of nodes and edges based on threshold\n    const {\n      attention,\n      edgeThreshold\n    } = this.props.globalState;\n    d3.select('svg.graph').selectAll('g.link').style('opacity', d => d.score > edgeThreshold ? 1 : 0);\n    var visibleNodes = [];\n    Object.values(attention).forEach(d => {\n      visibleNodes = visibleNodes.concat(flatTree(pruneEdge(d, edgeThreshold)));\n    });\n    d3.select('svg.graph').select('g.nodes').selectAll('g.nodeGroup').select('circle').style('opacity', d => {\n      return visibleNodes.includes(d.nodeId) ? 1 : 0;\n    });\n  }\n\n  componentDidMount() {\n    this.drawGraph();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      metaPathGroups: prevGroups,\n      selectedPathNodes: prevNodes,\n      edgeThreshold: prevThreshold\n    } = prevProps.globalState;\n    const {\n      metaPathGroups: currGroups,\n      selectedPathNodes: currNodes,\n      edgeThreshold: currThreshold\n    } = this.props.globalState;\n\n    if (Object.keys(prevGroups).length !== Object.keys(currGroups).length) {\n      this.drawGraph();\n      this.simulation.alpha(0.5).restart();\n    }\n\n    if (prevNodes.map(d => d.nodeId).join() !== currNodes.map(d => d.nodeId).join()) {\n      this.updateNodeLabel();\n    }\n\n    if (prevThreshold !== currThreshold) {\n      this.updateVisibility();\n    }\n\n    return false;\n  }\n\n  render() {\n    const {\n      width,\n      height\n    } = this.props;\n    const {\n      isAttentionLoading\n    } = this.props.globalState;\n    const selectedDrugs = Object.keys(this.props.globalState.metaPathGroups);\n    const reminderText = /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${width / 2}, ${height / 2})`,\n      fill: \"gray\",\n      fontSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 7\n      }\n    }, \"Please select a drug first\");\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      className: \"graph\",\n      width: width,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      className: \"links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      className: \"nodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      x: 0,\n      y: height - 25,\n      fill: \"gray\",\n      fontSize: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }\n    }, \"Drag & Drop to move nodes.\"), /*#__PURE__*/React.createElement(\"text\", {\n      x: 0,\n      y: height - 10,\n      fill: \"gray\",\n      fontSize: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }\n    }, \"Click on nodes to show/hide labels.\"), selectedDrugs.length === 0 ? reminderText : /*#__PURE__*/React.createElement(React.Fragment, null), isAttentionLoading ? /*#__PURE__*/React.createElement(\"g\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      className: \"loading__background\",\n      width: width,\n      height: height,\n      fill: \"white\",\n      opacity: 0.5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${width / 2}, ${height / 2})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 13\n      }\n    }, LOADING_ICON)) : /*#__PURE__*/React.createElement(React.Fragment, null));\n  }\n\n}","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/components/TabContainer/Graph.tsx"],"names":["React","d3","flatTree","getNodeColor","pruneEdge","LOADING_ICON","ModelNodeForce","Component","padding","RADIUS","prevNodes","prevLinks","simulation","forceSimulation","force","forceManyBody","strength","forceLink","id","d","distance","forceCollide","radius","alphaMin","ticked","svgNodes","svgLinks","attr","x","y","select","source","target","dragstarted","event","active","alpha","restart","fx","fy","dragged","dragended","isTargetNode","drugPredictions","selectedDisease","props","globalState","selectedDrugs","filter","selected","map","includes","nodeId","isHighlighted","selectedPathNodes","i","nodeType","getNodeLinks","attention","edgeTypes","width","height","nodes","links","Object","values","forEach","nodeAttention","rootNode","hierarchy","desNodes","descendants","node","data","prevNode","find","push","concat","desLinks","sourceData","targetData","edgeInfo","replace","score","length","drugIdx","indexOf","drawGraph","nodeNameDict","widthScale","scaleLinear","range","domain","extent","selectAll","join","enter","append","on","transition","delay","text","call","drag","bind","update","exit","remove","classed","textlabel","isHidden","updateVisibility","updateNodeLabel","edgeThreshold","style","visibleNodes","componentDidMount","componentDidUpdate","prevProps","metaPathGroups","prevGroups","prevThreshold","currGroups","currNodes","currThreshold","keys","render","isAttentionLoading","reminderText"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as d3 from 'd3';\nimport { IAttentionTree, IState } from 'types';\nimport { flatTree, getNodeColor, pruneEdge, LOADING_ICON } from 'helpers';\n\ninterface Props {\n  height: number;\n  width: number;\n  globalState: IState;\n}\n\ninterface State {}\n\ninterface INode extends d3.SimulationNodeDatum {\n  id: string; // `${node_type}:${node_id}`\n  nodeId: string; //\n  nodeType: string; //\n  fx?: number;\n  fy?: number;\n}\n\ninterface ILink {\n  source: string;\n  target: string;\n  score: number;\n  edgeInfo: string;\n}\n\nexport default class ModelNodeForce extends React.Component<Props, State> {\n  public padding = 20;\n  RADIUS = 8;\n  prevNodes: INode[] = [];\n  prevLinks: ILink[] = [];\n  simulation = d3\n    .forceSimulation<INode, ILink>()\n    .force('charge', d3.forceManyBody<INode>().strength(-170))\n    .force(\n      'link',\n      d3\n        .forceLink<INode, ILink>()\n        .id((d) => d.id)\n        .distance(6)\n        .strength(0.6)\n    )\n    .force('collision', d3.forceCollide().radius(this.RADIUS + 2))\n    .alphaMin(0.05); // force quick simulation\n\n  ticked(\n    svgNodes: d3.Selection<\n      SVGGElement | d3.BaseType,\n      INode,\n      d3.BaseType,\n      unknown\n    >,\n    svgLinks: any\n  ) {\n    svgNodes.attr('transform', (d) => `translate(${d.x}, ${d.y})`);\n\n    svgLinks\n      .select('line.link')\n      .attr('x1', (d: any) => d.source.x)\n      .attr('y1', (d: any) => d.source.y)\n      .attr('x2', (d: any) => d.target.x)\n      .attr('y2', (d: any) => d.target.y);\n\n    svgLinks\n      .select('line.mask')\n      .attr('x1', (d: any) => d.source.x)\n      .attr('y1', (d: any) => d.source.y)\n      .attr('x2', (d: any) => d.target.x)\n      .attr('y2', (d: any) => d.target.y);\n\n    svgLinks\n      .select('text')\n      .attr('text-anchor', 'middle')\n      .attr(\n        'transform',\n        (d: any) =>\n          `translate(${(d.target.x + d.source.x) / 2}, ${\n            (d.source.y + d.target.y) / 2\n          })`\n      );\n  }\n\n  dragstarted(d: INode) {\n    if (!d3.event.active) this.simulation.alpha(0.3).restart();\n    d.fx = d.x;\n    d.fy = d.y;\n  }\n\n  dragged(d: INode) {\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  }\n\n  dragended(d: INode) {\n    if (!d3.event.active) this.simulation.alpha(0);\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  }\n\n  isTargetNode(d: INode) {\n    const { drugPredictions, selectedDisease } = this.props.globalState;\n    const selectedDrugs = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n    return selectedDrugs.includes(d.nodeId) || selectedDisease === d.nodeId;\n  }\n\n  isHighlighted(d: INode) {\n    const { selectedPathNodes } = this.props.globalState;\n    return (\n      selectedPathNodes.map((i) => i.nodeType).includes(d.nodeType) &&\n      selectedPathNodes.map((i) => i.nodeId).includes(d.nodeId)\n    );\n  }\n\n  getNodeLinks() {\n    const {\n      drugPredictions,\n      attention,\n      // edgeThreshold,\n      selectedDisease,\n      edgeTypes,\n    } = this.props.globalState;\n    const { width, height } = this.props;\n    const selectedDrugs = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n\n    let nodes: INode[] = [],\n      links: ILink[] = [];\n\n    Object.values(attention).forEach((nodeAttention: IAttentionTree) => {\n      // let nodeAttentionFiltered = pruneEdge(nodeAttention, edgeThreshold);\n      const rootNode = d3.hierarchy(nodeAttention);\n      let desNodes: INode[] = [];\n      rootNode.descendants().forEach((d) => {\n        const node = {\n          id: `${d.data.nodeType}:${d.data.nodeId}`,\n          nodeId: d.data.nodeId,\n          nodeType: d.data.nodeType,\n        };\n        const prevNode = this.prevNodes.find((d) => d.id === node.id);\n        desNodes.push({ ...node, ...prevNode });\n      });\n      nodes = nodes.concat(desNodes);\n      const desLinks = rootNode.links().map((d) => {\n        const sourceData = d.source.data,\n          targetData = d.target.data;\n        let edgeInfo = targetData.edgeInfo.replace('rev_', '');\n        edgeInfo = edgeTypes[edgeInfo]?.edgeInfo || edgeInfo;\n        return {\n          source: `${sourceData.nodeType}:${sourceData.nodeId}`,\n          target: `${targetData.nodeType}:${targetData.nodeId}`,\n          score: targetData.score,\n          edgeInfo,\n        };\n      });\n      links = links.concat(desLinks);\n    });\n\n    // // show the virus host proteins\n    // let nodes:INode[] =  viralTargets.map(d => { return { id: d.toString() } }),\n    //     links:ILink[] = targetLinks.map(edge => { return { source: edge[0].toString(), target: edge[1].toString() } })\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      const drugIdx = selectedDrugs.indexOf(node.nodeId);\n      if (node.nodeId === selectedDisease) {\n        node.fy = height / 2;\n        node.fx = width * 0.2;\n      } else if (drugIdx > -1) {\n        node.fy = (height / (selectedDrugs.length + 1)) * (drugIdx + 1);\n        node.fx = width * 0.8;\n      }\n    }\n\n    this.prevNodes = nodes;\n    this.prevLinks = links;\n\n    return { nodes, links };\n  }\n\n  drawGraph() {\n    const { nodeNameDict } = this.props.globalState;\n    const { nodes, links } = this.getNodeLinks();\n    const { width, height } = this.props;\n\n    const widthScale = d3\n      .scaleLinear()\n      .range([1, 4])\n      .domain(d3.extent(links.map((d) => d.score)) as [number, number]);\n\n    let svgLinks: any = d3\n      .select('svg.graph')\n      .select('g.links')\n      .selectAll('g.link')\n      .data(links)\n      .join((enter) => enter.append('g').attr('class', 'link'))\n      .on('mouseover', function () {\n        d3.select(this)\n          .select('text.edgeLabel')\n          .transition()\n          .delay(500)\n          .attr('class', 'edgeLabel');\n      })\n      .on('mouseout', function () {\n        d3.select(this)\n          .select('text.edgeLabel')\n          .transition()\n          .delay(500)\n          .attr('class', 'edgeLabel hidden');\n      });\n\n    svgLinks\n      .append('line')\n      .attr('x1', (d: any) => d.target.x)\n      .attr('y1', (d: any) => d.target.y)\n      .attr('x2', (d: any) => d.source.x)\n      .attr('y2', (d: any) => d.source.y)\n      .attr('class', 'link')\n      .attr('stroke', '#aaa')\n      .attr('stroke-width', (d: any) => widthScale(d.score))\n      .attr('id', (d: any) => d.id);\n\n    svgLinks\n      .append('line')\n      .attr('x1', (d: any) => d.target.x)\n      .attr('y1', (d: any) => d.target.y)\n      .attr('x2', (d: any) => d.source.x)\n      .attr('y2', (d: any) => d.source.y)\n      .attr('class', 'mask')\n      .attr('stroke-width', 4)\n      .attr('stroke', 'transparent');\n\n    svgLinks\n      .append('text')\n      .attr('class', 'edgeLabel hidden')\n      .attr(\n        'transform',\n        (d: any) =>\n          `translate(${(d.target.x + d.source.x) / 2}, ${\n            (d.source.y + d.target.y) / 2\n          })`\n      )\n      .text((d: any) => d.edgeInfo);\n\n    let svgNodes = d3\n      .select('svg.graph')\n      .select('g.nodes')\n      .selectAll('g.nodeGroup')\n      .data(nodes, (d: any) => d.id)\n      .join(\n        (enter) =>\n          enter\n            .append('g')\n            .attr('class', 'nodeGroup')\n            .attr('transform', (d) => {\n              return `translate(${d.x || width / 2}, ${d.y || height / 2})`;\n            }) // ensure d.x is not undefined when first entering\n            .attr('cursor', 'pointer')\n            .call(\n              d3\n                .drag<SVGGElement, INode>()\n                .on('start', this.dragstarted.bind(this))\n                .on('drag', this.dragged.bind(this))\n                .on('end', this.dragended.bind(this))\n            ),\n\n        (update) =>\n          update.attr('transform', (d) => `translate(${d.x}, ${d.y})`),\n\n        (exit) => exit.remove()\n      );\n\n    svgNodes\n      .append('circle')\n      // .filter(d=>!drugTargets.includes(d.id))\n      .attr('r', this.RADIUS)\n      // .attr(\"r\", 5)\n      .attr('class', 'node')\n      .attr('id', (d) => d.id)\n      .attr('fill', (d: INode) => getNodeColor(d.nodeType))\n      .attr('stroke', 'white');\n\n    // add label to all nodes\n    svgNodes\n      .append('text')\n      .attr('class', 'nodeLabel')\n      .attr('transform', `translate(${-1 * this.RADIUS}, ${-2 * this.RADIUS} )`)\n      .text((d) => nodeNameDict[d.nodeType][d.nodeId])\n      .classed('hidden', true);\n\n    svgNodes\n      .filter((d) => this.isTargetNode(d) || this.isHighlighted(d))\n      .select('text.nodeLabel')\n      .classed('hidden', false);\n\n    // toggle node visibility through click\n    svgNodes.on('click', function (d) {\n      const textlabel = d3.select(this).select('text.nodeLabel');\n      const isHidden = textlabel.classed('hidden');\n      textlabel.classed('hidden', !isHidden);\n    });\n\n    this.simulation.nodes(nodes);\n    this.simulation.force<d3.ForceLink<INode, ILink>>('link')!.links(links);\n    this.simulation.on('tick', () => this.ticked(svgNodes, svgLinks));\n\n    this.updateVisibility();\n  }\n\n  updateNodeLabel() {\n    let svgNodes: d3.Selection<\n      SVGGElement,\n      INode,\n      d3.BaseType,\n      any\n    > = d3.select('svg.graph').select('g.nodes').selectAll('g.nodeGroup');\n\n    svgNodes\n      .filter((d) => this.isTargetNode(d) || this.isHighlighted(d))\n      .select('text.nodeLabel')\n      .classed('hidden', false);\n  }\n\n  updateVisibility() {\n    // update visibility of nodes and edges based on threshold\n    const { attention, edgeThreshold } = this.props.globalState;\n\n    d3.select('svg.graph')\n      .selectAll('g.link')\n      .style('opacity', (d: any) => (d.score > edgeThreshold ? 1 : 0));\n\n    var visibleNodes: string[] = [];\n    Object.values(attention).forEach((d) => {\n      visibleNodes = visibleNodes.concat(flatTree(pruneEdge(d, edgeThreshold)));\n    });\n\n    d3.select('svg.graph')\n      .select('g.nodes')\n      .selectAll('g.nodeGroup')\n      .select('circle')\n      .style('opacity', (d: any) => {\n        return visibleNodes.includes(d.nodeId) ? 1 : 0;\n      });\n  }\n\n  componentDidMount() {\n    this.drawGraph();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      metaPathGroups: prevGroups,\n      selectedPathNodes: prevNodes,\n      edgeThreshold: prevThreshold,\n    } = prevProps.globalState;\n    const {\n      metaPathGroups: currGroups,\n      selectedPathNodes: currNodes,\n      edgeThreshold: currThreshold,\n    } = this.props.globalState;\n    if (Object.keys(prevGroups).length !== Object.keys(currGroups).length) {\n      this.drawGraph();\n      this.simulation.alpha(0.5).restart();\n    }\n    if (\n      prevNodes.map((d) => d.nodeId).join() !==\n      currNodes.map((d) => d.nodeId).join()\n    ) {\n      this.updateNodeLabel();\n    }\n\n    if (prevThreshold !== currThreshold) {\n      this.updateVisibility();\n    }\n    return false;\n  }\n\n  render() {\n    const { width, height } = this.props;\n    const { isAttentionLoading } = this.props.globalState;\n\n    const selectedDrugs = Object.keys(this.props.globalState.metaPathGroups);\n    const reminderText = (\n      <text\n        transform={`translate(${width / 2}, ${height / 2})`}\n        fill=\"gray\"\n        fontSize={20}\n      >\n        Please select a drug first\n      </text>\n    );\n\n    return (\n      <svg className=\"graph\" width={width} height={height}>\n        <g className=\"links\" />\n        <g className=\"nodes\" />\n        <text x={0} y={height - 25} fill=\"gray\" fontSize={12}>\n          Drag & Drop to move nodes.\n        </text>\n        <text x={0} y={height - 10} fill=\"gray\" fontSize={12}>\n          Click on nodes to show/hide labels.\n        </text>\n        {selectedDrugs.length === 0 ? reminderText : <></>}\n        {isAttentionLoading ? (\n          <g className=\"loading\">\n            <rect\n              className=\"loading__background\"\n              width={width}\n              height={height}\n              fill=\"white\"\n              opacity={0.5}\n            />\n            <g transform={`translate(${width / 2}, ${height / 2})`}>\n              {LOADING_ICON}\n            </g>\n          </g>\n        ) : (\n          <></>\n        )}\n      </svg>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}