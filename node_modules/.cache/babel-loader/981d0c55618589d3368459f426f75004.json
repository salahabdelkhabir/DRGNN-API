{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Explorer_V2\\\\src\\\\components\\\\CardContainer\\\\Scatter.tsx\";\nimport React from 'react';\nimport { requestEmbedding } from 'stores/DataService';\nimport { StateConsumer } from 'stores';\nimport * as d3 from 'd3';\nimport { HIGHLIGHT_COLOR, SELECTED_COLOR } from 'helpers/color';\nimport { LOADING_ICON } from 'helpers';\nimport { selectDrug } from 'stores/actions';\nimport { isAddDrug } from 'stores/reducer';\nimport lasso from './lasso.js';\n\nclass Scatter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.circleRadius = 3;\n    this.hoverTimeout = 0;\n    this.WAIT = 500;\n    this.state = {\n      embedding: {},\n      tooltip: {\n        visible: false,\n        info: '',\n        position: [0, 0]\n      }\n    };\n    this.onChangeDrug = this.onChangeDrug.bind(this);\n  }\n\n  async loadEmbedding() {\n    const embedding = await requestEmbedding();\n    this.setState({\n      embedding\n    });\n  }\n\n  componentDidMount() {\n    this.loadEmbedding();\n  }\n\n  addLasso(width, height) {\n    const {\n      drugPredictions\n    } = this.props.globalState;\n    const selectedDrugIds = drugPredictions.filter(d => d.selected).map(d => d.id); // lasso draw\n\n    d3.selectAll('g.lasso').remove();\n    var svg = d3.select('svg.scatter');\n    var lasso_area = d3.select('rect.lasso'); // Lasso functions to execute while lassoing\n\n    var lasso_start = () => {// (mylasso.items() as any).attr('r', 5); // reset size\n      // .attr('fill', 'white')\n    };\n\n    var lasso_draw = () => {// Style the possible dots\n      // mylasso\n      // .possibleItems()\n      // .classed(\"possible\", true)\n    };\n\n    var lasso_end = () => {\n      // mylasso.selectedItems()\n      //     .attr('fill', colors[this.selected.length])\n      //     .attr('r', '7')\n      //     .classed(`group_${this.selected.length}`, true)\n      // mylasso\n      // .items()\n      // .classed(\"possible\", false)\n      mylasso.selectedItems()._groups[0].forEach(d => {\n        const drugID = d.attributes.id.value;\n\n        if (!selectedDrugIds.includes(drugID)) {\n          selectDrug(drugID, this.props.globalState.selectedDisease, true, this.props.dispatch);\n        }\n      });\n    };\n\n    var mylasso = lasso();\n    mylasso.items(svg.selectAll('circle.highlighted'));\n    mylasso.targetArea(lasso_area) // area where the lasso can be started\n    .on('start', lasso_start) // lasso start function\n    .on('draw', lasso_draw) // lasso draw function\n    .on('end', lasso_end); // lasso end function\n\n    svg.call(mylasso);\n  }\n\n  drawScatter() {\n    const {\n      drugPredictions\n    } = this.props.globalState;\n    const {\n      width,\n      height\n    } = this.props; // this.addLasso(width, height);\n\n    const {\n      embedding\n    } = this.state;\n    const xDomain = d3.extent(Object.values(embedding).map(d => d[0])),\n          yDomain = d3.extent(Object.values(embedding).map(d => d[1]));\n    const xScale = d3.scaleLinear().domain(xDomain).range([this.circleRadius, width - this.circleRadius]);\n    const yScale = d3.scaleLinear().domain(yDomain).range([this.circleRadius, height - this.circleRadius]);\n    const drugIds = drugPredictions.map(d => d.id);\n    const selectedDrugIds = drugPredictions.filter(d => d.selected).map(d => d.id);\n\n    const getSortIndex = drugId => drugIds.indexOf(drugId) > -1 ? drugIds.indexOf(drugId) : drugIds.length; // sort by drug rank\n\n\n    const nodes = Object.keys(embedding).sort((a, b) => -getSortIndex(a) + getSortIndex(b)) // sort by drug rank\n    .map(drugId => {\n      const [x, y] = embedding[drugId];\n      const drugRank = drugIds.indexOf(drugId);\n      const isHighlighted = drugRank > -1; // the top n predicted drugs\n\n      const isSelected = selectedDrugIds.includes(drugId); // the drug selected by users\n\n      return /*#__PURE__*/React.createElement(\"circle\", {\n        cx: xScale(x),\n        cy: yScale(y),\n        key: drugId,\n        className: isHighlighted ? 'highlighted drug' : 'drug',\n        id: drugId,\n        fill: isSelected ? SELECTED_COLOR : isHighlighted ? HIGHLIGHT_COLOR : 'lightGray',\n        opacity: isSelected ? 1 : 0.7,\n        stroke: 'white',\n        r: isSelected ? this.circleRadius * 1.5 : isHighlighted ? this.circleRadius * 1.1 : this.circleRadius,\n        onDoubleClick: () => {\n          if (isHighlighted) this.onChangeDrug(drugId);\n        },\n        onClick: () => this.showTooltip(drugId, [xScale(x), yScale(y)]) // onMouseLeave={() => this.hideTooltip()}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      });\n    });\n    return nodes;\n  }\n\n  onChangeDrug(selectedDrug) {\n    const isAdd = isAddDrug(this.props.globalState.drugPredictions, selectedDrug);\n    selectDrug(selectedDrug, this.props.globalState.selectedDisease, isAdd, this.props.dispatch);\n  }\n\n  showTooltip(drugId, position) {\n    const {\n      nodeNameDict\n    } = this.props.globalState;\n    this.hoverTimeout = window.setTimeout(() => {\n      this.setState({\n        tooltip: {\n          visible: true,\n          info: `drug: ${nodeNameDict['drug'][drugId]}`,\n          position\n        }\n      });\n    }, this.WAIT);\n  }\n\n  hideTooltip() {\n    window.clearTimeout(this.hoverTimeout);\n    this.setState({\n      tooltip: {\n        visible: false,\n        info: ``,\n        position: [0, 0]\n      }\n    });\n  }\n\n  render() {\n    const {\n      isDrugLoading,\n      isInitializing\n    } = this.props.globalState;\n    const {\n      width,\n      height\n    } = this.props;\n    const {\n      tooltip\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      className: \"scatter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      className: \"lasso area\",\n      width: width,\n      height: height,\n      opacity: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"g\", {\n      className: \"scatter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }\n    }, this.state.embedding ? this.drawScatter() : /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${width / 2}, ${height / 2})`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 15\n      }\n    }, LOADING_ICON), isDrugLoading && !isInitializing ? /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${width / 2}, ${height / 2})`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 15\n      }\n    }, LOADING_ICON) : /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 15\n      }\n    })), ' ', /*#__PURE__*/React.createElement(\"text\", {\n      x: 0,\n      y: height - 25,\n      fontSize: 12,\n      fill: \"gray\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, \"Click to reveal the drug name.\"), /*#__PURE__*/React.createElement(\"text\", {\n      x: 0,\n      y: height - 10,\n      fontSize: 12,\n      fill: \"gray\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }\n    }, \"Double click to select the drug.\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: `tooltip tooltip-${tooltip.visible ? 'show' : 'hide'}`,\n      style: {\n        left: tooltip.position[0] + this.circleRadius,\n        top: tooltip.position[1] + this.circleRadius\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }\n    }, tooltip.info));\n  }\n\n}\n\nexport default StateConsumer(Scatter);","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/components/CardContainer/Scatter.tsx"],"names":["React","requestEmbedding","StateConsumer","d3","HIGHLIGHT_COLOR","SELECTED_COLOR","LOADING_ICON","selectDrug","isAddDrug","lasso","Scatter","Component","constructor","props","circleRadius","hoverTimeout","WAIT","state","embedding","tooltip","visible","info","position","onChangeDrug","bind","loadEmbedding","setState","componentDidMount","addLasso","width","height","drugPredictions","globalState","selectedDrugIds","filter","d","selected","map","id","selectAll","remove","svg","select","lasso_area","lasso_start","lasso_draw","lasso_end","mylasso","selectedItems","_groups","forEach","drugID","attributes","value","includes","selectedDisease","dispatch","items","targetArea","on","call","drawScatter","xDomain","extent","Object","values","yDomain","xScale","scaleLinear","domain","range","yScale","drugIds","getSortIndex","drugId","indexOf","length","nodes","keys","sort","a","b","x","y","drugRank","isHighlighted","isSelected","showTooltip","selectedDrug","isAdd","nodeNameDict","window","setTimeout","hideTooltip","clearTimeout","render","isDrugLoading","isInitializing","left","top"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { requestEmbedding } from 'stores/DataService';\nimport { IState, IDispatch } from 'types';\nimport { StateConsumer } from 'stores';\nimport * as d3 from 'd3';\nimport { HIGHLIGHT_COLOR, SELECTED_COLOR } from 'helpers/color';\nimport { LOADING_ICON } from 'helpers';\nimport { selectDrug } from 'stores/actions';\nimport { isAddDrug } from 'stores/reducer';\nimport lasso from './lasso.js';\n\ninterface State {\n  embedding: { [key: string]: [number, number] };\n  tooltip: {\n    visible: boolean;\n    info: string;\n    position: [number, number];\n  };\n}\ninterface Props {\n  width: number;\n  height: number;\n  globalState: IState;\n  dispatch: IDispatch;\n}\n\nclass Scatter extends React.Component<Props, State> {\n  circleRadius = 3;\n  hoverTimeout: number = 0;\n  WAIT = 500;\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      embedding: {},\n      tooltip: { visible: false, info: '', position: [0, 0] },\n    };\n    this.onChangeDrug = this.onChangeDrug.bind(this);\n  }\n  async loadEmbedding() {\n    const embedding = await requestEmbedding();\n    this.setState({ embedding });\n  }\n  componentDidMount() {\n    this.loadEmbedding();\n  }\n\n  addLasso(width: number, height: number) {\n    const { drugPredictions } = this.props.globalState;\n    const selectedDrugIds = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n    // lasso draw\n    d3.selectAll('g.lasso').remove();\n    var svg = d3.select('svg.scatter');\n\n    var lasso_area = d3.select('rect.lasso');\n\n    // Lasso functions to execute while lassoing\n    var lasso_start = () => {\n      // (mylasso.items() as any).attr('r', 5); // reset size\n      // .attr('fill', 'white')\n    };\n\n    var lasso_draw = () => {\n      // Style the possible dots\n      // mylasso\n      // .possibleItems()\n      // .classed(\"possible\", true)\n    };\n\n    var lasso_end = () => {\n      // mylasso.selectedItems()\n      //     .attr('fill', colors[this.selected.length])\n      //     .attr('r', '7')\n      //     .classed(`group_${this.selected.length}`, true)\n      // mylasso\n      // .items()\n      // .classed(\"possible\", false)\n\n      (mylasso.selectedItems() as any)._groups[0].forEach((d: any) => {\n        const drugID = d.attributes.id.value;\n        if (!selectedDrugIds.includes(drugID)) {\n          selectDrug(\n            drugID,\n            this.props.globalState.selectedDisease,\n            true,\n            this.props.dispatch\n          );\n        }\n      });\n    };\n\n    var mylasso = lasso();\n    mylasso.items(svg.selectAll('circle.highlighted'));\n    mylasso\n      .targetArea(lasso_area) // area where the lasso can be started\n      .on('start', lasso_start) // lasso start function\n      .on('draw', lasso_draw) // lasso draw function\n      .on('end', lasso_end); // lasso end function\n\n    svg.call(mylasso);\n  }\n  drawScatter() {\n    const { drugPredictions } = this.props.globalState;\n    const { width, height } = this.props;\n\n    // this.addLasso(width, height);\n\n    const { embedding } = this.state;\n    const xDomain = d3.extent(Object.values(embedding).map((d) => d[0])) as [\n        number,\n        number\n      ],\n      yDomain = d3.extent(Object.values(embedding).map((d) => d[1])) as [\n        number,\n        number\n      ];\n\n    const xScale = d3\n      .scaleLinear()\n      .domain(xDomain)\n      .range([this.circleRadius, width - this.circleRadius]);\n    const yScale = d3\n      .scaleLinear()\n      .domain(yDomain)\n      .range([this.circleRadius, height - this.circleRadius]);\n\n    const drugIds = drugPredictions.map((d) => d.id);\n    const selectedDrugIds = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n\n    const getSortIndex = (drugId: string) =>\n      drugIds.indexOf(drugId) > -1 ? drugIds.indexOf(drugId) : drugIds.length; // sort by drug rank\n\n    const nodes = Object.keys(embedding)\n      .sort((a, b) => -getSortIndex(a) + getSortIndex(b)) // sort by drug rank\n      .map((drugId) => {\n        const [x, y] = embedding[drugId];\n        const drugRank = drugIds.indexOf(drugId);\n        const isHighlighted = drugRank > -1; // the top n predicted drugs\n        const isSelected = selectedDrugIds.includes(drugId); // the drug selected by users\n\n        return (\n          <circle\n            cx={xScale(x)}\n            cy={yScale(y)}\n            key={drugId}\n            className={isHighlighted ? 'highlighted drug' : 'drug'}\n            id={drugId}\n            fill={\n              isSelected\n                ? SELECTED_COLOR\n                : isHighlighted\n                ? HIGHLIGHT_COLOR\n                : 'lightGray'\n            }\n            opacity={isSelected ? 1 : 0.7}\n            stroke={'white'}\n            r={\n              isSelected\n                ? this.circleRadius * 1.5\n                : isHighlighted\n                ? this.circleRadius * 1.1\n                : this.circleRadius\n            }\n            onDoubleClick={() => {\n              if (isHighlighted) this.onChangeDrug(drugId);\n            }}\n            onClick={() => this.showTooltip(drugId, [xScale(x), yScale(y)])}\n            // onMouseLeave={() => this.hideTooltip()}\n          />\n        );\n      });\n    return nodes;\n  }\n  onChangeDrug(selectedDrug: string) {\n    const isAdd = isAddDrug(\n      this.props.globalState.drugPredictions,\n      selectedDrug\n    );\n    selectDrug(\n      selectedDrug,\n      this.props.globalState.selectedDisease,\n      isAdd,\n      this.props.dispatch\n    );\n  }\n  showTooltip(drugId: string, position: [number, number]) {\n    const { nodeNameDict } = this.props.globalState;\n    this.hoverTimeout = window.setTimeout(() => {\n      this.setState({\n        tooltip: {\n          visible: true,\n          info: `drug: ${nodeNameDict['drug'][drugId]}`,\n          position,\n        },\n      });\n    }, this.WAIT);\n  }\n  hideTooltip() {\n    window.clearTimeout(this.hoverTimeout);\n    this.setState({\n      tooltip: {\n        visible: false,\n        info: ``,\n        position: [0, 0],\n      },\n    });\n  }\n  render() {\n    const { isDrugLoading, isInitializing } = this.props.globalState;\n    const { width, height } = this.props;\n    const { tooltip } = this.state;\n\n    return (\n      <div style={{ position: 'relative' }}>\n        <svg width={width} height={height} className=\"scatter\">\n          <rect\n            className=\"lasso area\"\n            width={width}\n            height={height}\n            opacity={0}\n          />\n          <g className=\"scatter\">\n            {this.state.embedding ? (\n              this.drawScatter()\n            ) : (\n              <g\n                transform={`translate(${width / 2}, ${height / 2})`}\n                textAnchor=\"middle\"\n              >\n                {LOADING_ICON}\n              </g>\n            )}\n            {/* overlap a loading icon when loading */}\n            {isDrugLoading && !isInitializing ? (\n              <g\n                transform={`translate(${width / 2}, ${height / 2})`}\n                textAnchor=\"middle\"\n              >\n                {LOADING_ICON}\n              </g>\n            ) : (\n              <g />\n            )}\n          </g>{' '}\n          <text x={0} y={height - 25} fontSize={12} fill=\"gray\">\n            Click to reveal the drug name.\n          </text>\n          <text x={0} y={height - 10} fontSize={12} fill=\"gray\">\n            Double click to select the drug.\n          </text>\n        </svg>\n        <div\n          className={`tooltip tooltip-${tooltip.visible ? 'show' : 'hide'}`}\n          style={{\n            left: tooltip.position[0] + this.circleRadius,\n            top: tooltip.position[1] + this.circleRadius,\n          }}\n        >\n          {tooltip.info}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StateConsumer(Scatter);\n"]},"metadata":{},"sourceType":"module"}