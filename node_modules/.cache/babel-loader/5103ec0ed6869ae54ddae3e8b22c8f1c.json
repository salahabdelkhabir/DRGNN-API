{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\Explorer_V2\\\\src\\\\components\\\\Sider\\\\index.tsx\";\nimport React from 'react';\nimport { StateConsumer } from 'stores';\nimport { ACTION_TYPES, selectDisease, selectDrug } from 'stores/actions';\nimport './Sider.css';\nimport { Col, InputNumber, Layout, Row, Select, Skeleton, Slider, Tooltip } from 'antd';\nimport { QuestionCircleOutlined, CheckCircleOutlined } from '@ant-design/icons';\nimport { getNodeColor, sigmoid, wheterRemoveDisease, sentenceCapitalizer, INIT_DISEASE, INIT_DRUGS } from 'helpers';\nconst {\n  Sider\n} = Layout;\nconst {\n  Option\n} = Select;\n\nclass DrugSider extends React.Component {\n  // height of the open drug list\n  constructor(props) {\n    super(props);\n    this.padding = 10;\n    this.listHeight = 450;\n    this.changeEdgeTHR = this.changeEdgeTHR.bind(this);\n    this.changeRevEdgeTHR = this.changeRevEdgeTHR.bind(this);\n    this.onChangeDisease = this.onChangeDisease.bind(this);\n    this.onChangeDrug = this.onChangeDrug.bind(this);\n  }\n\n  onChangeDrug(selectedDrugs) {\n    const prevSelectedDrugs = this.props.globalState.drugPredictions.filter(d => d.selected).map(d => d.id);\n    const isAdd = selectedDrugs.length > prevSelectedDrugs.length;\n    const currentDrug = isAdd ? selectedDrugs[selectedDrugs.length - 1] : prevSelectedDrugs.filter(d => !selectedDrugs.includes(d))[0];\n    selectDrug(currentDrug, this.props.globalState.selectedDisease, isAdd, this.props.dispatch);\n  }\n\n  changeEdgeTHR(value) {\n    if (typeof value == 'number') {\n      this.props.dispatch({\n        type: ACTION_TYPES.Change_Edge_THR,\n        payload: {\n          edgeThreshold: value\n        }\n      });\n    }\n  }\n\n  changeRevEdgeTHR(value) {\n    if (typeof value == 'number') {\n      this.props.dispatch({\n        type: ACTION_TYPES.Change_Edge_THR,\n        payload: {\n          edgeThreshold: Math.round(10 - 10 * value) / 10\n        }\n      });\n    }\n  }\n\n  onChangeDisease(selectedDisease) {\n    selectDisease(selectedDisease, this.props.dispatch);\n  }\n\n  render() {\n    let {\n      siderWidth\n    } = this.props;\n    let {\n      edgeThreshold,\n      nodeTypes,\n      diseaseOptions,\n      drugPredictions,\n      nodeNameDict,\n      selectedDisease,\n      isInitializing\n    } = this.props.globalState;\n    const defaultDiseaseText = 'Search to Select a disease';\n    const defaultDrugText = 'Select a drug from the prediction';\n    const selectedDrugIds = drugPredictions.filter(d => d.selected).map(d => d.id);\n    const untreatable_disease_icon = /*#__PURE__*/React.createElement(Tooltip // title=\"The knowledge graph contains no drug for treating this disease\"\n    , {\n      title: \"Diseases with no known drug indications in the dataset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QuestionCircleOutlined, {\n      style: {\n        color: '#eb2f96'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }));\n    const known_drug_icon = /*#__PURE__*/React.createElement(Tooltip // title=\"the knowledge graph contains this drug indication\"\n    , {\n      title: \"US FDA-approved drug indication\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CheckCircleOutlined, {\n      style: {\n        color: '#52c41a'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }));\n    let sider = /*#__PURE__*/React.createElement(Sider, {\n      width: siderWidth,\n      theme: \"light\",\n      style: {\n        padding: `${this.padding}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, \"Disease:\", /*#__PURE__*/React.createElement(Select, {\n      defaultValue: INIT_DISEASE,\n      value: selectedDisease,\n      style: {\n        width: siderWidth - 2 * this.padding\n      },\n      onChange: this.onChangeDisease,\n      showSearch: true,\n      optionFilterProp: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, diseaseOptions.length > 0 ? diseaseOptions.filter(d => !wheterRemoveDisease(nodeNameDict['disease'][d[0]]) // remove some diseases that are too general\n    ).map(d => {\n      const [id, treatable] = d;\n      const name = nodeNameDict['disease'][id];\n      const cropName = name.length * 10 > siderWidth * 0.8 ? name.slice(0, 40) + '...' : name;\n      return /*#__PURE__*/React.createElement(Option, {\n        value: id,\n        label: name,\n        key: `diseaseID_${d}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        title: name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }\n      }, \" \", sentenceCapitalizer(cropName), \" \"), !treatable && untreatable_disease_icon);\n    }) : /*#__PURE__*/React.createElement(Option, {\n      value: \"loading\",\n      label: \"loading\",\n      key: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, \"data is loading..\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }), \"Drug:\", drugPredictions.length === 0 || isInitializing ?\n    /*#__PURE__*/\n    // <span>Data is Loading.. </span>\n    React.createElement(Skeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }) : /*#__PURE__*/React.createElement(Select, {\n      mode: \"multiple\",\n      style: {\n        width: siderWidth - 2 * this.padding\n      },\n      open: true,\n      showSearch: true,\n      optionFilterProp: \"label\",\n      listHeight: this.listHeight,\n      onChange: this.onChangeDrug,\n      defaultValue: INIT_DRUGS,\n      value: selectedDrugIds // menuItemSelectedIcon={<EyeOutlined />}\n      ,\n      menuItemSelectedIcon: /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    }, drugPredictions.map((d, idx) => {\n      const {\n        id: drug_id,\n        score,\n        known\n      } = d;\n      const name = nodeNameDict['drug'][drug_id];\n\n      if (name === undefined) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null);\n      }\n\n      const cropName = name.length * 10 > siderWidth * 0.5 ? name.slice(0, 20) + '...' : name;\n      return /*#__PURE__*/React.createElement(Option, {\n        value: drug_id,\n        key: `disease_${idx}`,\n        label: name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }\n      }, \"[\", idx + 1, \"] \", /*#__PURE__*/React.createElement(\"span\", {\n        title: name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 35\n        }\n      }, cropName), ' ', known && known_drug_icon), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          float: 'right'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }\n      }, \"score: \", sigmoid(score).toFixed(3))));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dummy\",\n      style: {\n        height: this.listHeight + 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }), \"Minimum self-explaining edge score:\", /*#__PURE__*/React.createElement(Row, {\n      gutter: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputNumber, {\n      value: edgeThreshold,\n      onChange: this.changeEdgeTHR,\n      style: {\n        width: '100%'\n      },\n      step: 0.1,\n      min: 0,\n      max: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      span: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Slider, {\n      step: 0.1,\n      value: 1 - edgeThreshold,\n      min: 0,\n      max: 1,\n      onChange: this.changeRevEdgeTHR,\n      marks: {\n        0: '1.0',\n        1: '0.0'\n      },\n      reverse: true,\n      tipFormatter: value => {\n        return value && (1 - value).toFixed(1);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nodeTypes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, \"Node Types:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }), nodeTypes.map(nodeType => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: nodeType,\n        style: {\n          marginLeft: '5px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          background: getNodeColor(nodeType),\n          color: 'white',\n          padding: '2px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }\n      }, nodeType));\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }\n    }));\n    return sider;\n  }\n\n}\n\nexport default StateConsumer(DrugSider);","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/components/Sider/index.tsx"],"names":["React","StateConsumer","ACTION_TYPES","selectDisease","selectDrug","Col","InputNumber","Layout","Row","Select","Skeleton","Slider","Tooltip","QuestionCircleOutlined","CheckCircleOutlined","getNodeColor","sigmoid","wheterRemoveDisease","sentenceCapitalizer","INIT_DISEASE","INIT_DRUGS","Sider","Option","DrugSider","Component","constructor","props","padding","listHeight","changeEdgeTHR","bind","changeRevEdgeTHR","onChangeDisease","onChangeDrug","selectedDrugs","prevSelectedDrugs","globalState","drugPredictions","filter","d","selected","map","id","isAdd","length","currentDrug","includes","selectedDisease","dispatch","value","type","Change_Edge_THR","payload","edgeThreshold","Math","round","render","siderWidth","nodeTypes","diseaseOptions","nodeNameDict","isInitializing","defaultDiseaseText","defaultDrugText","selectedDrugIds","untreatable_disease_icon","color","known_drug_icon","sider","width","treatable","name","cropName","slice","idx","drug_id","score","known","undefined","float","toFixed","height","nodeType","marginLeft","background"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,QAA9B;AAEA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,UAAtC,QAAwD,gBAAxD;AAEA,OAAO,aAAP;AAEA,SACEC,GADF,EAEEC,WAFF,EAGEC,MAHF,EAIEC,GAJF,EAKEC,MALF,EAMEC,QANF,EAOEC,MAPF,EAQEC,OARF,QASO,MATP;AAUA,SAASC,sBAAT,EAAiCC,mBAAjC,QAA4D,mBAA5D;AACA,SACEC,YADF,EAEEC,OAFF,EAGEC,mBAHF,EAIEC,mBAJF,EAKEC,YALF,EAMEC,UANF,QAOO,SAPP;AASA,MAAM;AAAEC,EAAAA;AAAF,IAAYd,MAAlB;AACA,MAAM;AAAEe,EAAAA;AAAF,IAAab,MAAnB;;AAQA,MAAMc,SAAN,SAAwBvB,KAAK,CAACwB,SAA9B,CAA+C;AAE3B;AAClBC,EAAAA,WAAW,CAACC,KAAD,EAAe;AACxB,UAAMA,KAAN;AADwB,SAF1BC,OAE0B,GAFhB,EAEgB;AAAA,SAD1BC,UAC0B,GADb,GACa;AAExB,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKE,eAAL,GAAuB,KAAKA,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AACDG,EAAAA,YAAY,CAACC,aAAD,EAA0B;AACpC,UAAMC,iBAAiB,GAAG,KAAKT,KAAL,CAAWU,WAAX,CAAuBC,eAAvB,CACvBC,MADuB,CACfC,CAAD,IAAOA,CAAC,CAACC,QADO,EAEvBC,GAFuB,CAElBF,CAAD,IAAOA,CAAC,CAACG,EAFU,CAA1B;AAGA,UAAMC,KAAK,GAAGT,aAAa,CAACU,MAAd,GAAuBT,iBAAiB,CAACS,MAAvD;AAEA,UAAMC,WAAW,GAAGF,KAAK,GACrBT,aAAa,CAACA,aAAa,CAACU,MAAd,GAAuB,CAAxB,CADQ,GAErBT,iBAAiB,CAACG,MAAlB,CAA0BC,CAAD,IAAO,CAACL,aAAa,CAACY,QAAd,CAAuBP,CAAvB,CAAjC,EAA4D,CAA5D,CAFJ;AAGAnC,IAAAA,UAAU,CACRyC,WADQ,EAER,KAAKnB,KAAL,CAAWU,WAAX,CAAuBW,eAFf,EAGRJ,KAHQ,EAIR,KAAKjB,KAAL,CAAWsB,QAJH,CAAV;AAMD;;AACDnB,EAAAA,aAAa,CAACoB,KAAD,EAAqC;AAChD,QAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAKvB,KAAL,CAAWsB,QAAX,CAAoB;AAClBE,QAAAA,IAAI,EAAEhD,YAAY,CAACiD,eADD;AAElBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEJ;AAAjB;AAFS,OAApB;AAID;AACF;;AAEDlB,EAAAA,gBAAgB,CAACkB,KAAD,EAAqC;AACnD,QAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAKvB,KAAL,CAAWsB,QAAX,CAAoB;AAClBE,QAAAA,IAAI,EAAEhD,YAAY,CAACiD,eADD;AAElBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEC,IAAI,CAACC,KAAL,CAAW,KAAK,KAAKN,KAArB,IAA8B;AAA/C;AAFS,OAApB;AAID;AACF;;AAEDjB,EAAAA,eAAe,CAACe,eAAD,EAA0B;AACvC5C,IAAAA,aAAa,CAAC4C,eAAD,EAAkB,KAAKrB,KAAL,CAAWsB,QAA7B,CAAb;AACD;;AACDQ,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEC,MAAAA;AAAF,QAAiB,KAAK/B,KAA1B;AACA,QAAI;AACF2B,MAAAA,aADE;AAEFK,MAAAA,SAFE;AAGFC,MAAAA,cAHE;AAIFtB,MAAAA,eAJE;AAKFuB,MAAAA,YALE;AAMFb,MAAAA,eANE;AAOFc,MAAAA;AAPE,QAQA,KAAKnC,KAAL,CAAWU,WARf;AASA,UAAM0B,kBAAkB,GAAG,4BAA3B;AACA,UAAMC,eAAe,GAAG,mCAAxB;AACA,UAAMC,eAAe,GAAG3B,eAAe,CACpCC,MADqB,CACbC,CAAD,IAAOA,CAAC,CAACC,QADK,EAErBC,GAFqB,CAEhBF,CAAD,IAAOA,CAAC,CAACG,EAFQ,CAAxB;AAIA,UAAMuB,wBAAwB,gBAC5B,oBAAC,OAAD,CACE;AADF;AAEE,MAAA,KAAK,EAAC,wDAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE,oBAAC,sBAAD;AAAwB,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AASA,UAAMC,eAAe,gBACnB,oBAAC,OAAD,CACE;AADF;AAEE,MAAA,KAAK,EAAC,iCAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE,oBAAC,mBAAD;AAAqB,MAAA,KAAK,EAAE;AAAED,QAAAA,KAAK,EAAE;AAAT,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AASA,QAAIE,KAAK,gBACP,oBAAC,KAAD;AACE,MAAA,KAAK,EAAEX,UADT;AAEE,MAAA,KAAK,EAAC,OAFR;AAGE,MAAA,KAAK,EAAE;AAAE9B,QAAAA,OAAO,EAAG,GAAE,KAAKA,OAAQ;AAA3B,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAME,oBAAC,MAAD;AACE,MAAA,YAAY,EAAER,YADhB;AAEE,MAAA,KAAK,EAAE4B,eAFT;AAGE,MAAA,KAAK,EAAE;AAAEsB,QAAAA,KAAK,EAAEZ,UAAU,GAAG,IAAI,KAAK9B;AAA/B,OAHT;AAIE,MAAA,QAAQ,EAAE,KAAKK,eAJjB;AAKE,MAAA,UAAU,MALZ;AAME,MAAA,gBAAgB,EAAC,OANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQG2B,cAAc,CAACf,MAAf,GAAwB,CAAxB,GACCe,cAAc,CACXrB,MADH,CAEKC,CAAD,IAAO,CAACtB,mBAAmB,CAAC2C,YAAY,CAAC,SAAD,CAAZ,CAAwBrB,CAAC,CAAC,CAAD,CAAzB,CAAD,CAF/B,CAE+D;AAF/D,MAIGE,GAJH,CAIQF,CAAD,IAAO;AACV,YAAM,CAACG,EAAD,EAAK4B,SAAL,IAAkB/B,CAAxB;AACA,YAAMgC,IAAI,GAAGX,YAAY,CAAC,SAAD,CAAZ,CAAwBlB,EAAxB,CAAb;AACA,YAAM8B,QAAQ,GACZD,IAAI,CAAC3B,MAAL,GAAc,EAAd,GAAmBa,UAAU,GAAG,GAAhC,GACIc,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,EAAd,IAAoB,KADxB,GAEIF,IAHN;AAIA,0BACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE7B,EAAf;AAAmB,QAAA,KAAK,EAAE6B,IAA1B;AAAgC,QAAA,GAAG,EAAG,aAAYhC,CAAE,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAM,QAAA,KAAK,EAAEgC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAqBrD,mBAAmB,CAACsD,QAAD,CAAxC,MADF,EAEG,CAACF,SAAD,IAAcL,wBAFjB,CADF;AAMD,KAjBH,CADD,gBAoBC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,KAAK,EAAC,SAA9B;AAAwC,MAAA,GAAG,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BA5BJ,CANF,eAuCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvCF,WAyCG5B,eAAe,CAACO,MAAhB,KAA2B,CAA3B,IAAgCiB,cAAhC;AAAA;AACC;AACA,wBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,gBAIC,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAEZ,UAAU,GAAG,IAAI,KAAK9B;AAA/B,OAFT;AAGE,MAAA,IAAI,MAHN;AAIE,MAAA,UAAU,MAJZ;AAKE,MAAA,gBAAgB,EAAC,OALnB;AAME,MAAA,UAAU,EAAE,KAAKC,UANnB;AAOE,MAAA,QAAQ,EAAE,KAAKK,YAPjB;AAQE,MAAA,YAAY,EAAEb,UARhB;AASE,MAAA,KAAK,EAAE4C,eATT,CAUE;AAVF;AAWE,MAAA,oBAAoB,eAAE,yCAXxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaG3B,eAAe,CAACI,GAAhB,CAAoB,CAACF,CAAD,EAAImC,GAAJ,KAAY;AAC/B,YAAM;AAAEhC,QAAAA,EAAE,EAAEiC,OAAN;AAAeC,QAAAA,KAAf;AAAsBC,QAAAA;AAAtB,UAAgCtC,CAAtC;AAEA,YAAMgC,IAAI,GAAGX,YAAY,CAAC,MAAD,CAAZ,CAAqBe,OAArB,CAAb;;AACA,UAAIJ,IAAI,KAAKO,SAAb,EAAwB;AACtB,4BAAO,yCAAP;AACD;;AACD,YAAMN,QAAQ,GACZD,IAAI,CAAC3B,MAAL,GAAc,EAAd,GAAmBa,UAAU,GAAG,GAAhC,GACIc,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,EAAd,IAAoB,KADxB,GAEIF,IAHN;AAIA,0BACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAEI,OAAf;AAAwB,QAAA,GAAG,EAAG,WAAUD,GAAI,EAA5C;AAA+C,QAAA,KAAK,EAAEH,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cACIG,GAAG,GAAG,CADV,qBACc;AAAM,QAAA,KAAK,EAAEH,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoBC,QAApB,CADd,EACmD,GADnD,EAEGK,KAAK,IAAIV,eAFZ,CADF,eAKE;AAAM,QAAA,KAAK,EAAE;AAAEY,UAAAA,KAAK,EAAE;AAAT,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACU/D,OAAO,CAAC4D,KAAD,CAAP,CAAeI,OAAf,CAAuB,CAAvB,CADV,CALF,CADF,CADF;AAcD,KAzBA,CAbH,CA7CJ,eAsFE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,KAAKrD,UAAL,GAAkB;AAA5B,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtFF,sDAwFE,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AACE,MAAA,KAAK,EAAEyB,aADT;AAEE,MAAA,QAAQ,EAAE,KAAKxB,aAFjB;AAGE,MAAA,KAAK,EAAE;AAAEwC,QAAAA,KAAK,EAAE;AAAT,OAHT;AAIE,MAAA,IAAI,EAAE,GAJR;AAKE,MAAA,GAAG,EAAE,CALP;AAME,MAAA,GAAG,EAAE,CANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAWE,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAE,GADR;AAEE,MAAA,KAAK,EAAE,IAAIhB,aAFb;AAGE,MAAA,GAAG,EAAE,CAHP;AAIE,MAAA,GAAG,EAAE,CAJP;AAKE,MAAA,QAAQ,EAAE,KAAKtB,gBALjB;AAME,MAAA,KAAK,EAAE;AAAE,WAAG,KAAL;AAAY,WAAG;AAAf,OANT;AAOE,MAAA,OAAO,EAAE,IAPX;AAQE,MAAA,YAAY,EAAGkB,KAAD,IAAoB;AAChC,eAAOA,KAAK,IAAI,CAAC,IAAIA,KAAL,EAAY+B,OAAZ,CAAoB,CAApB,CAAhB;AACD,OAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAXF,CAxFF,eAkHE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGGtB,SAAS,CAACjB,GAAV,CAAeyC,QAAD,IAAc;AAC3B,0BACE;AAAK,QAAA,GAAG,EAAEA,QAAV;AAAoB,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAErE,YAAY,CAACmE,QAAD,CADnB;AAELhB,UAAAA,KAAK,EAAE,OAFF;AAGLvC,UAAAA,OAAO,EAAE;AAHJ,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGuD,QAPH,CAFF,CADF;AAcD,KAfA,CAHH,CAlHF,eAsIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtIF,eA+IE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/IF,CADF;AAoJA,WAAOd,KAAP;AACD;;AAvO4C;;AA0O/C,eAAenE,aAAa,CAACsB,SAAD,CAA5B","sourcesContent":["import React from 'react';\nimport { StateConsumer } from 'stores';\nimport { IDispatch, IState } from 'types';\nimport { ACTION_TYPES, selectDisease, selectDrug } from 'stores/actions';\n\nimport './Sider.css';\n\nimport {\n  Col,\n  InputNumber,\n  Layout,\n  Row,\n  Select,\n  Skeleton,\n  Slider,\n  Tooltip,\n} from 'antd';\nimport { QuestionCircleOutlined, CheckCircleOutlined } from '@ant-design/icons';\nimport {\n  getNodeColor,\n  sigmoid,\n  wheterRemoveDisease,\n  sentenceCapitalizer,\n  INIT_DISEASE,\n  INIT_DRUGS,\n} from 'helpers';\n\nconst { Sider } = Layout;\nconst { Option } = Select;\n\ninterface Props {\n  siderWidth: number;\n  globalState: IState;\n  dispatch: IDispatch;\n}\n\nclass DrugSider extends React.Component<Props> {\n  padding = 10;\n  listHeight = 450; // height of the open drug list\n  constructor(props: Props) {\n    super(props);\n    this.changeEdgeTHR = this.changeEdgeTHR.bind(this);\n    this.changeRevEdgeTHR = this.changeRevEdgeTHR.bind(this);\n    this.onChangeDisease = this.onChangeDisease.bind(this);\n    this.onChangeDrug = this.onChangeDrug.bind(this);\n  }\n  onChangeDrug(selectedDrugs: string[]) {\n    const prevSelectedDrugs = this.props.globalState.drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n    const isAdd = selectedDrugs.length > prevSelectedDrugs.length;\n\n    const currentDrug = isAdd\n      ? selectedDrugs[selectedDrugs.length - 1]\n      : prevSelectedDrugs.filter((d) => !selectedDrugs.includes(d))[0];\n    selectDrug(\n      currentDrug,\n      this.props.globalState.selectedDisease,\n      isAdd,\n      this.props.dispatch\n    );\n  }\n  changeEdgeTHR(value: number | undefined | string) {\n    if (typeof value == 'number') {\n      this.props.dispatch({\n        type: ACTION_TYPES.Change_Edge_THR,\n        payload: { edgeThreshold: value },\n      });\n    }\n  }\n\n  changeRevEdgeTHR(value: number | undefined | string) {\n    if (typeof value == 'number') {\n      this.props.dispatch({\n        type: ACTION_TYPES.Change_Edge_THR,\n        payload: { edgeThreshold: Math.round(10 - 10 * value) / 10 },\n      });\n    }\n  }\n\n  onChangeDisease(selectedDisease: string) {\n    selectDisease(selectedDisease, this.props.dispatch);\n  }\n  render() {\n    let { siderWidth } = this.props;\n    let {\n      edgeThreshold,\n      nodeTypes,\n      diseaseOptions,\n      drugPredictions,\n      nodeNameDict,\n      selectedDisease,\n      isInitializing,\n    } = this.props.globalState;\n    const defaultDiseaseText = 'Search to Select a disease';\n    const defaultDrugText = 'Select a drug from the prediction';\n    const selectedDrugIds = drugPredictions\n      .filter((d) => d.selected)\n      .map((d) => d.id);\n\n    const untreatable_disease_icon = (\n      <Tooltip\n        // title=\"The knowledge graph contains no drug for treating this disease\"\n        title=\"Diseases with no known drug indications in the dataset\"\n      >\n        <QuestionCircleOutlined style={{ color: '#eb2f96' }} />\n      </Tooltip>\n    );\n\n    const known_drug_icon = (\n      <Tooltip\n        // title=\"the knowledge graph contains this drug indication\"\n        title=\"US FDA-approved drug indication\"\n      >\n        <CheckCircleOutlined style={{ color: '#52c41a' }} />\n      </Tooltip>\n    );\n\n    let sider = (\n      <Sider\n        width={siderWidth}\n        theme=\"light\"\n        style={{ padding: `${this.padding}px` }}\n      >\n        Disease:\n        <Select\n          defaultValue={INIT_DISEASE}\n          value={selectedDisease}\n          style={{ width: siderWidth - 2 * this.padding }}\n          onChange={this.onChangeDisease}\n          showSearch\n          optionFilterProp=\"label\"\n        >\n          {diseaseOptions.length > 0 ? (\n            diseaseOptions\n              .filter(\n                (d) => !wheterRemoveDisease(nodeNameDict['disease'][d[0]]) // remove some diseases that are too general\n              )\n              .map((d) => {\n                const [id, treatable] = d;\n                const name = nodeNameDict['disease'][id];\n                const cropName =\n                  name.length * 10 > siderWidth * 0.8\n                    ? name.slice(0, 40) + '...'\n                    : name;\n                return (\n                  <Option value={id} label={name} key={`diseaseID_${d}`}>\n                    <span title={name}> {sentenceCapitalizer(cropName)} </span>\n                    {!treatable && untreatable_disease_icon}\n                  </Option>\n                );\n              })\n          ) : (\n            <Option value=\"loading\" label=\"loading\" key=\"loading\">\n              data is loading..\n            </Option>\n          )}\n        </Select>\n        <br />\n        Drug:\n        {drugPredictions.length === 0 || isInitializing ? (\n          // <span>Data is Loading.. </span>\n          <Skeleton />\n        ) : (\n          <Select\n            mode=\"multiple\"\n            style={{ width: siderWidth - 2 * this.padding }}\n            open\n            showSearch\n            optionFilterProp=\"label\"\n            listHeight={this.listHeight}\n            onChange={this.onChangeDrug}\n            defaultValue={INIT_DRUGS}\n            value={selectedDrugIds}\n            // menuItemSelectedIcon={<EyeOutlined />}\n            menuItemSelectedIcon={<></>}\n          >\n            {drugPredictions.map((d, idx) => {\n              const { id: drug_id, score, known } = d;\n\n              const name = nodeNameDict['drug'][drug_id];\n              if (name === undefined) {\n                return <></>;\n              }\n              const cropName =\n                name.length * 10 > siderWidth * 0.5\n                  ? name.slice(0, 20) + '...'\n                  : name;\n              return (\n                <Option value={drug_id} key={`disease_${idx}`} label={name}>\n                  <div>\n                    <span>\n                      [{idx + 1}] <span title={name}>{cropName}</span>{' '}\n                      {known && known_drug_icon}\n                    </span>\n                    <span style={{ float: 'right' }}>\n                      score: {sigmoid(score).toFixed(3)}\n                      {/* rank: {idx + 1} */}\n                    </span>\n                  </div>\n                </Option>\n              );\n            })}\n          </Select>\n        )}\n        <div className=\"dummy\" style={{ height: this.listHeight + 20 }} />\n        Minimum self-explaining edge score:\n        <Row gutter={20}>\n          <Col span={5}>\n            <InputNumber\n              value={edgeThreshold}\n              onChange={this.changeEdgeTHR}\n              style={{ width: '100%' }}\n              step={0.1}\n              min={0}\n              max={1}\n            />\n          </Col>\n          <Col span={16}>\n            <Slider\n              step={0.1}\n              value={1 - edgeThreshold}\n              min={0}\n              max={1}\n              onChange={this.changeRevEdgeTHR}\n              marks={{ 0: '1.0', 1: '0.0' }}\n              reverse={true}\n              tipFormatter={(value?: number) => {\n                return value && (1 - value).toFixed(1);\n              }}\n            />\n          </Col>\n        </Row>\n        <div className=\"nodeTypes\">\n          Node Types:\n          <br />\n          {nodeTypes.map((nodeType) => {\n            return (\n              <div key={nodeType} style={{ marginLeft: '5px' }}>\n                {/* <input type=\"checkbox\" style={{ margin: \"2px\" }} /> */}\n                <span\n                  style={{\n                    background: getNodeColor(nodeType),\n                    color: 'white',\n                    padding: '2px',\n                  }}\n                >\n                  {nodeType}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n        <br />\n        {/* <Button\n          icon={<SearchOutlined />}\n          type=\"primary\"\n          shape=\"round\"\n          onClick={() => this.startAnalysis()}\n        >\n          Show Attention Tree\n        </Button> */}\n        <br />\n      </Sider>\n    );\n\n    return sider;\n  }\n}\n\nexport default StateConsumer(DrugSider);\n"]},"metadata":{},"sourceType":"module"}