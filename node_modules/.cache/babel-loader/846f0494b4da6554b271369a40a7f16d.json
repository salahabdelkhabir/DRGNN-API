{"ast":null,"code":"import axios from 'axios';\nimport { SERVER_URL, DATA_URL } from 'Const';\nconst axiosInstance = axios.create({\n  baseURL: `${SERVER_URL}/`,\n  // timeout: 1000,\n  withCredentials: false,\n  headers: {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n  }\n});\n\nconst requestNodeTypes = async () => {\n  const url = `./${DATA_URL}/node_types.json`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestEdgeTypes = async () => {\n  const url = `./${DATA_URL}/edge_types.json`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestNodeNameDict = async () => {\n  const url = `./${DATA_URL}/node_name_dict.json`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestAttention = async (diseaseID, drugID) => {\n  const url = `./api/attention?disease=${diseaseID}&drug=${drugID}`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestAttentionPair = async (diseaseID, drugID) => {\n  const url = `./api/attention_pair?disease=${diseaseID}&drug=${drugID}`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestDiseaseOptions = async () => {\n  // // // the ranking is too costy\n  // const url = './api/diseases';\n  // const response = await axiosInstance.get(url);\n  // const diseaseOptions: IState['diseaseOptions'] = response.data;\n  // const urlRanking = `./${DATA_URL}/disease_ranking.json`;\n  // let rank = await axiosInstance.get(urlRanking);\n  // const ranking = rank.data;\n  // diseaseOptions.sort((a, b) => ranking.indexOf(a[0]) - ranking.indexOf(b[0]));\n  const urlRanking = `./${DATA_URL}/disease_options.json`; // ranking is too costy, use pre-processed data\n\n  let res = await axiosInstance.get(urlRanking);\n  return res.data;\n};\n\nconst requestDrugPredictions = async diseaseID => {\n  const url = `./api/drug_predictions?disease_id=${diseaseID}`;\n  const response = await axiosInstance.get(url);\n  const predictions = response.data;\n  return predictions;\n};\n\nconst requestEmbedding = async () => {\n  const url = `./${DATA_URL}/drug_tsne.json`;\n  const response = await axiosInstance.get(url);\n  return response.data;\n};\n\nexport { requestNodeTypes, requestEdgeTypes, requestAttention, requestNodeNameDict, requestDrugPredictions, requestDiseaseOptions, requestEmbedding, requestAttentionPair };","map":{"version":3,"sources":["D:/Downloads/Explorer_V2/src/stores/DataService.ts"],"names":["axios","SERVER_URL","DATA_URL","axiosInstance","create","baseURL","withCredentials","headers","requestNodeTypes","url","response","get","data","requestEdgeTypes","requestNodeNameDict","requestAttention","diseaseID","drugID","requestAttentionPair","requestDiseaseOptions","urlRanking","res","requestDrugPredictions","predictions","requestEmbedding"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AAEA,MAAMC,aAAa,GAAGH,KAAK,CAACI,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAG,GAAEJ,UAAW,GADU;AAEjC;AACAK,EAAAA,eAAe,EAAE,KAHgB;AAIjCC,EAAAA,OAAO,EAAE;AACP,mCAA+B,GADxB;AAEP,oCAAgC;AAFzB;AAJwB,CAAb,CAAtB;;AAUA,MAAMC,gBAAgB,GAAG,YAA+B;AACtD,QAAMC,GAAG,GAAI,KAAIP,QAAS,kBAA1B;AACA,MAAIQ,QAAQ,GAAG,MAAMP,aAAa,CAACQ,GAAd,CAAkBF,GAAlB,CAArB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAJD;;AAMA,MAAMC,gBAAgB,GAAG,YAAiC;AACxD,QAAMJ,GAAG,GAAI,KAAIP,QAAS,kBAA1B;AACA,MAAIQ,QAAQ,GAAG,MAAMP,aAAa,CAACQ,GAAd,CAAkBF,GAAlB,CAArB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAJD;;AAMA,MAAME,mBAAmB,GAAG,YAAY;AACtC,QAAML,GAAG,GAAI,KAAIP,QAAS,sBAA1B;AACA,MAAIQ,QAAQ,GAAG,MAAMP,aAAa,CAACQ,GAAd,CAAkBF,GAAlB,CAArB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAJD;;AAMA,MAAMG,gBAAgB,GAAG,OAAOC,SAAP,EAA0BC,MAA1B,KAA6C;AACpE,QAAMR,GAAG,GAAI,2BAA0BO,SAAU,SAAQC,MAAO,EAAhE;AACA,MAAIP,QAAQ,GAAG,MAAMP,aAAa,CAACQ,GAAd,CAAkBF,GAAlB,CAArB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAJD;;AAMA,MAAMM,oBAAoB,GAAG,OAC3BF,SAD2B,EAE3BC,MAF2B,KAGiD;AAC5E,QAAMR,GAAG,GAAI,gCAA+BO,SAAU,SAAQC,MAAO,EAArE;AACA,MAAIP,QAAQ,GAAG,MAAMP,aAAa,CAACQ,GAAd,CAAkBF,GAAlB,CAArB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAPD;;AASA,MAAMO,qBAAqB,GAAG,YAAY;AACxC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA,QAAMC,UAAU,GAAI,KAAIlB,QAAS,uBAAjC,CAXwC,CAWiB;;AACzD,MAAImB,GAAG,GAAG,MAAMlB,aAAa,CAACQ,GAAd,CAAkBS,UAAlB,CAAhB;AAEA,SAAOC,GAAG,CAACT,IAAX;AACD,CAfD;;AAiBA,MAAMU,sBAAsB,GAAG,MAAON,SAAP,IAA6B;AAC1D,QAAMP,GAAG,GAAI,qCAAoCO,SAAU,EAA3D;AACA,QAAMN,QAAQ,GAAG,MAAMP,aAAa,CAACQ,GAAd,CAAkBF,GAAlB,CAAvB;AACA,QAAMc,WAAW,GAAGb,QAAQ,CAACE,IAA7B;AACA,SAAOW,WAAP;AACD,CALD;;AAOA,MAAMC,gBAAgB,GAAG,YAAY;AACnC,QAAMf,GAAG,GAAI,KAAIP,QAAS,iBAA1B;AACA,QAAMQ,QAAQ,GAAG,MAAMP,aAAa,CAACQ,GAAd,CAAkBF,GAAlB,CAAvB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAJD;;AAMA,SACEJ,gBADF,EAEEK,gBAFF,EAGEE,gBAHF,EAIED,mBAJF,EAKEQ,sBALF,EAMEH,qBANF,EAOEK,gBAPF,EAQEN,oBARF","sourcesContent":["import axios from 'axios';\nimport { IAttentionTree, IEdgeTypes, IPath, IState } from 'types';\nimport { SERVER_URL, DATA_URL } from 'Const';\n\nconst axiosInstance = axios.create({\n  baseURL: `${SERVER_URL}/`,\n  // timeout: 1000,\n  withCredentials: false,\n  headers: {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n  },\n});\n\nconst requestNodeTypes = async (): Promise<string[]> => {\n  const url = `./${DATA_URL}/node_types.json`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestEdgeTypes = async (): Promise<IEdgeTypes> => {\n  const url = `./${DATA_URL}/edge_types.json`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestNodeNameDict = async () => {\n  const url = `./${DATA_URL}/node_name_dict.json`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestAttention = async (diseaseID: string, drugID: string) => {\n  const url = `./api/attention?disease=${diseaseID}&drug=${drugID}`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestAttentionPair = async (\n  diseaseID: string,\n  drugID: string\n): Promise<{ attention: { [k: string]: IAttentionTree }; paths: IPath[] }> => {\n  const url = `./api/attention_pair?disease=${diseaseID}&drug=${drugID}`;\n  let response = await axiosInstance.get(url);\n  return response.data;\n};\n\nconst requestDiseaseOptions = async () => {\n  // // // the ranking is too costy\n  // const url = './api/diseases';\n  // const response = await axiosInstance.get(url);\n  // const diseaseOptions: IState['diseaseOptions'] = response.data;\n\n  // const urlRanking = `./${DATA_URL}/disease_ranking.json`;\n  // let rank = await axiosInstance.get(urlRanking);\n  // const ranking = rank.data;\n\n  // diseaseOptions.sort((a, b) => ranking.indexOf(a[0]) - ranking.indexOf(b[0]));\n  const urlRanking = `./${DATA_URL}/disease_options.json`; // ranking is too costy, use pre-processed data\n  let res = await axiosInstance.get(urlRanking);\n\n  return res.data;\n};\n\nconst requestDrugPredictions = async (diseaseID: string) => {\n  const url = `./api/drug_predictions?disease_id=${diseaseID}`;\n  const response = await axiosInstance.get(url);\n  const predictions = response.data;\n  return predictions;\n};\n\nconst requestEmbedding = async () => {\n  const url = `./${DATA_URL}/drug_tsne.json`;\n  const response = await axiosInstance.get(url);\n  return response.data;\n};\n\nexport {\n  requestNodeTypes,\n  requestEdgeTypes,\n  requestAttention,\n  requestNodeNameDict,\n  requestDrugPredictions,\n  requestDiseaseOptions,\n  requestEmbedding,\n  requestAttentionPair,\n};\n"]},"metadata":{},"sourceType":"module"}